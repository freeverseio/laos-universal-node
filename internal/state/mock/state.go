// Code generated by MockGen. DO NOT EDIT.
// Source: internal/state/state.go
//
// Generated by this command:
//
//	mockgen -source=internal/state/state.go -destination=internal/state/mock/state.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	model "github.com/freeverseio/laos-universal-node/internal/platform/model"
	state "github.com/freeverseio/laos-universal-node/internal/state"
	enumerated "github.com/freeverseio/laos-universal-node/internal/state/enumerated"
	enumeratedtotal "github.com/freeverseio/laos-universal-node/internal/state/enumeratedtotal"
	ownership "github.com/freeverseio/laos-universal-node/internal/state/ownership"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// NewTransaction mocks base method.
func (m *MockService) NewTransaction() state.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction")
	ret0, _ := ret[0].(state.Tx)
	return ret0
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockServiceMockRecorder) NewTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockService)(nil).NewTransaction))
}

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// BalanceOf mocks base method.
func (m *MockTx) BalanceOf(contract, owner common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceOf", contract, owner)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceOf indicates an expected call of BalanceOf.
func (mr *MockTxMockRecorder) BalanceOf(contract, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceOf", reflect.TypeOf((*MockTx)(nil).BalanceOf), contract, owner)
}

// Checkout mocks base method.
func (m *MockTx) Checkout(contract common.Address, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockTxMockRecorder) Checkout(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockTx)(nil).Checkout), contract, blockNumber)
}

// Commit mocks base method.
func (m *MockTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
}

// CreateTreesForContract mocks base method.
func (m *MockTx) CreateTreesForContract(contract common.Address) (ownership.Tree, enumerated.Tree, enumeratedtotal.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTreesForContract", contract)
	ret0, _ := ret[0].(ownership.Tree)
	ret1, _ := ret[1].(enumerated.Tree)
	ret2, _ := ret[2].(enumeratedtotal.Tree)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateTreesForContract indicates an expected call of CreateTreesForContract.
func (mr *MockTxMockRecorder) CreateTreesForContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTreesForContract", reflect.TypeOf((*MockTx)(nil).CreateTreesForContract), contract)
}

// DeleteRootTag mocks base method.
func (m *MockTx) DeleteRootTag(contract common.Address, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRootTag", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRootTag indicates an expected call of DeleteRootTag.
func (mr *MockTxMockRecorder) DeleteRootTag(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRootTag", reflect.TypeOf((*MockTx)(nil).DeleteRootTag), contract, blockNumber)
}

// Discard mocks base method.
func (m *MockTx) Discard() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Discard")
}

// Discard indicates an expected call of Discard.
func (mr *MockTxMockRecorder) Discard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockTx)(nil).Discard))
}

// Get mocks base method.
func (m *MockTx) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTxMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTx)(nil).Get), key)
}

// GetAllERC721UniversalContracts mocks base method.
func (m *MockTx) GetAllERC721UniversalContracts() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllERC721UniversalContracts")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllERC721UniversalContracts indicates an expected call of GetAllERC721UniversalContracts.
func (mr *MockTxMockRecorder) GetAllERC721UniversalContracts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllERC721UniversalContracts", reflect.TypeOf((*MockTx)(nil).GetAllERC721UniversalContracts))
}

// GetCollectionAddress mocks base method.
func (m *MockTx) GetCollectionAddress(contract string) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionAddress", contract)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionAddress indicates an expected call of GetCollectionAddress.
func (mr *MockTxMockRecorder) GetCollectionAddress(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionAddress", reflect.TypeOf((*MockTx)(nil).GetCollectionAddress), contract)
}

// GetCurrentEvoBlock mocks base method.
func (m *MockTx) GetCurrentEvoBlock() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEvoBlock")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentEvoBlock indicates an expected call of GetCurrentEvoBlock.
func (mr *MockTxMockRecorder) GetCurrentEvoBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEvoBlock", reflect.TypeOf((*MockTx)(nil).GetCurrentEvoBlock))
}

// GetCurrentEvoBlockTimestamp mocks base method.
func (m *MockTx) GetCurrentEvoBlockTimestamp() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEvoBlockTimestamp")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentEvoBlockTimestamp indicates an expected call of GetCurrentEvoBlockTimestamp.
func (mr *MockTxMockRecorder) GetCurrentEvoBlockTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEvoBlockTimestamp", reflect.TypeOf((*MockTx)(nil).GetCurrentEvoBlockTimestamp))
}

// GetCurrentEvoEventsIndexForOwnershipContract mocks base method.
func (m *MockTx) GetCurrentEvoEventsIndexForOwnershipContract(contract string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEvoEventsIndexForOwnershipContract", contract)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentEvoEventsIndexForOwnershipContract indicates an expected call of GetCurrentEvoEventsIndexForOwnershipContract.
func (mr *MockTxMockRecorder) GetCurrentEvoEventsIndexForOwnershipContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEvoEventsIndexForOwnershipContract", reflect.TypeOf((*MockTx)(nil).GetCurrentEvoEventsIndexForOwnershipContract), contract)
}

// GetCurrentOwnershipBlock mocks base method.
func (m *MockTx) GetCurrentOwnershipBlock() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentOwnershipBlock")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentOwnershipBlock indicates an expected call of GetCurrentOwnershipBlock.
func (mr *MockTxMockRecorder) GetCurrentOwnershipBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentOwnershipBlock", reflect.TypeOf((*MockTx)(nil).GetCurrentOwnershipBlock))
}

// GetEvoEndRangeBlockHash mocks base method.
func (m *MockTx) GetEvoEndRangeBlockHash() (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvoEndRangeBlockHash")
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvoEndRangeBlockHash indicates an expected call of GetEvoEndRangeBlockHash.
func (mr *MockTxMockRecorder) GetEvoEndRangeBlockHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvoEndRangeBlockHash", reflect.TypeOf((*MockTx)(nil).GetEvoEndRangeBlockHash))
}

// GetExistingERC721UniversalContracts mocks base method.
func (m *MockTx) GetExistingERC721UniversalContracts(contracts []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExistingERC721UniversalContracts", contracts)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExistingERC721UniversalContracts indicates an expected call of GetExistingERC721UniversalContracts.
func (mr *MockTxMockRecorder) GetExistingERC721UniversalContracts(contracts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExistingERC721UniversalContracts", reflect.TypeOf((*MockTx)(nil).GetExistingERC721UniversalContracts), contracts)
}

// GetLastTaggedBlock mocks base method.
func (m *MockTx) GetLastTaggedBlock(contract common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastTaggedBlock", contract)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastTaggedBlock indicates an expected call of GetLastTaggedBlock.
func (mr *MockTxMockRecorder) GetLastTaggedBlock(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastTaggedBlock", reflect.TypeOf((*MockTx)(nil).GetLastTaggedBlock), contract)
}

// GetMintedWithExternalURIEvents mocks base method.
func (m *MockTx) GetMintedWithExternalURIEvents(contract string) ([]model.MintedWithExternalURI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMintedWithExternalURIEvents", contract)
	ret0, _ := ret[0].([]model.MintedWithExternalURI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMintedWithExternalURIEvents indicates an expected call of GetMintedWithExternalURIEvents.
func (mr *MockTxMockRecorder) GetMintedWithExternalURIEvents(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMintedWithExternalURIEvents", reflect.TypeOf((*MockTx)(nil).GetMintedWithExternalURIEvents), contract)
}

// GetOwnershipEndRangeBlockHash mocks base method.
func (m *MockTx) GetOwnershipEndRangeBlockHash() (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnershipEndRangeBlockHash")
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnershipEndRangeBlockHash indicates an expected call of GetOwnershipEndRangeBlockHash.
func (mr *MockTxMockRecorder) GetOwnershipEndRangeBlockHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnershipEndRangeBlockHash", reflect.TypeOf((*MockTx)(nil).GetOwnershipEndRangeBlockHash))
}

// HasERC721UniversalContract mocks base method.
func (m *MockTx) HasERC721UniversalContract(contract string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasERC721UniversalContract", contract)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasERC721UniversalContract indicates an expected call of HasERC721UniversalContract.
func (mr *MockTxMockRecorder) HasERC721UniversalContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasERC721UniversalContract", reflect.TypeOf((*MockTx)(nil).HasERC721UniversalContract), contract)
}

// IsTreeSetForContract mocks base method.
func (m *MockTx) IsTreeSetForContract(contract common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTreeSetForContract", contract)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTreeSetForContract indicates an expected call of IsTreeSetForContract.
func (mr *MockTxMockRecorder) IsTreeSetForContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTreeSetForContract", reflect.TypeOf((*MockTx)(nil).IsTreeSetForContract), contract)
}

// Mint mocks base method.
func (m *MockTx) Mint(contract common.Address, mintEvent *model.MintedWithExternalURI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mint", contract, mintEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mint indicates an expected call of Mint.
func (mr *MockTxMockRecorder) Mint(contract, mintEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mint", reflect.TypeOf((*MockTx)(nil).Mint), contract, mintEvent)
}

// OwnerOf mocks base method.
func (m *MockTx) OwnerOf(contract common.Address, tokenId *big.Int) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerOf", contract, tokenId)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnerOf indicates an expected call of OwnerOf.
func (mr *MockTxMockRecorder) OwnerOf(contract, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerOf", reflect.TypeOf((*MockTx)(nil).OwnerOf), contract, tokenId)
}

// SetCurrentEvoBlock mocks base method.
func (m *MockTx) SetCurrentEvoBlock(number uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentEvoBlock", number)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentEvoBlock indicates an expected call of SetCurrentEvoBlock.
func (mr *MockTxMockRecorder) SetCurrentEvoBlock(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentEvoBlock", reflect.TypeOf((*MockTx)(nil).SetCurrentEvoBlock), number)
}

// SetCurrentEvoBlockTimestamp mocks base method.
func (m *MockTx) SetCurrentEvoBlockTimestamp(number uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentEvoBlockTimestamp", number)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentEvoBlockTimestamp indicates an expected call of SetCurrentEvoBlockTimestamp.
func (mr *MockTxMockRecorder) SetCurrentEvoBlockTimestamp(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentEvoBlockTimestamp", reflect.TypeOf((*MockTx)(nil).SetCurrentEvoBlockTimestamp), number)
}

// SetCurrentEvoEventsIndexForOwnershipContract mocks base method.
func (m *MockTx) SetCurrentEvoEventsIndexForOwnershipContract(contract string, blockNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentEvoEventsIndexForOwnershipContract", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentEvoEventsIndexForOwnershipContract indicates an expected call of SetCurrentEvoEventsIndexForOwnershipContract.
func (mr *MockTxMockRecorder) SetCurrentEvoEventsIndexForOwnershipContract(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentEvoEventsIndexForOwnershipContract", reflect.TypeOf((*MockTx)(nil).SetCurrentEvoEventsIndexForOwnershipContract), contract, blockNumber)
}

// SetCurrentOwnershipBlock mocks base method.
func (m *MockTx) SetCurrentOwnershipBlock(number uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentOwnershipBlock", number)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentOwnershipBlock indicates an expected call of SetCurrentOwnershipBlock.
func (mr *MockTxMockRecorder) SetCurrentOwnershipBlock(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentOwnershipBlock", reflect.TypeOf((*MockTx)(nil).SetCurrentOwnershipBlock), number)
}

// SetEvoEndRangeBlockHash mocks base method.
func (m *MockTx) SetEvoEndRangeBlockHash(blockHash common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEvoEndRangeBlockHash", blockHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEvoEndRangeBlockHash indicates an expected call of SetEvoEndRangeBlockHash.
func (mr *MockTxMockRecorder) SetEvoEndRangeBlockHash(blockHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEvoEndRangeBlockHash", reflect.TypeOf((*MockTx)(nil).SetEvoEndRangeBlockHash), blockHash)
}

// SetOwnershipEndRangeBlockHash mocks base method.
func (m *MockTx) SetOwnershipEndRangeBlockHash(blockHash common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnershipEndRangeBlockHash", blockHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnershipEndRangeBlockHash indicates an expected call of SetOwnershipEndRangeBlockHash.
func (mr *MockTxMockRecorder) SetOwnershipEndRangeBlockHash(blockHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnershipEndRangeBlockHash", reflect.TypeOf((*MockTx)(nil).SetOwnershipEndRangeBlockHash), blockHash)
}

// SetTreesForContract mocks base method.
func (m *MockTx) SetTreesForContract(contract common.Address, ownershipTree ownership.Tree, enumeratedTree enumerated.Tree, enumeratedTotalTree enumeratedtotal.Tree) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTreesForContract", contract, ownershipTree, enumeratedTree, enumeratedTotalTree)
}

// SetTreesForContract indicates an expected call of SetTreesForContract.
func (mr *MockTxMockRecorder) SetTreesForContract(contract, ownershipTree, enumeratedTree, enumeratedTotalTree any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTreesForContract", reflect.TypeOf((*MockTx)(nil).SetTreesForContract), contract, ownershipTree, enumeratedTree, enumeratedTotalTree)
}

// StoreERC721UniversalContracts mocks base method.
func (m *MockTx) StoreERC721UniversalContracts(universalContracts []model.ERC721UniversalContract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreERC721UniversalContracts", universalContracts)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreERC721UniversalContracts indicates an expected call of StoreERC721UniversalContracts.
func (mr *MockTxMockRecorder) StoreERC721UniversalContracts(universalContracts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreERC721UniversalContracts", reflect.TypeOf((*MockTx)(nil).StoreERC721UniversalContracts), universalContracts)
}

// StoreMintedWithExternalURIEvents mocks base method.
func (m *MockTx) StoreMintedWithExternalURIEvents(contract string, events []model.MintedWithExternalURI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMintedWithExternalURIEvents", contract, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMintedWithExternalURIEvents indicates an expected call of StoreMintedWithExternalURIEvents.
func (mr *MockTxMockRecorder) StoreMintedWithExternalURIEvents(contract, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMintedWithExternalURIEvents", reflect.TypeOf((*MockTx)(nil).StoreMintedWithExternalURIEvents), contract, events)
}

// TagRoot mocks base method.
func (m *MockTx) TagRoot(contract common.Address, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagRoot", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagRoot indicates an expected call of TagRoot.
func (mr *MockTxMockRecorder) TagRoot(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagRoot", reflect.TypeOf((*MockTx)(nil).TagRoot), contract, blockNumber)
}

// TokenByIndex mocks base method.
func (m *MockTx) TokenByIndex(contract common.Address, idx int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenByIndex", contract, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenByIndex indicates an expected call of TokenByIndex.
func (mr *MockTxMockRecorder) TokenByIndex(contract, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenByIndex", reflect.TypeOf((*MockTx)(nil).TokenByIndex), contract, idx)
}

// TokenOfOwnerByIndex mocks base method.
func (m *MockTx) TokenOfOwnerByIndex(contract, owner common.Address, idx int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenOfOwnerByIndex", contract, owner, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenOfOwnerByIndex indicates an expected call of TokenOfOwnerByIndex.
func (mr *MockTxMockRecorder) TokenOfOwnerByIndex(contract, owner, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenOfOwnerByIndex", reflect.TypeOf((*MockTx)(nil).TokenOfOwnerByIndex), contract, owner, idx)
}

// TokenURI mocks base method.
func (m *MockTx) TokenURI(contract common.Address, tokenId *big.Int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenURI", contract, tokenId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenURI indicates an expected call of TokenURI.
func (mr *MockTxMockRecorder) TokenURI(contract, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenURI", reflect.TypeOf((*MockTx)(nil).TokenURI), contract, tokenId)
}

// TotalSupply mocks base method.
func (m *MockTx) TotalSupply(contract common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalSupply", contract)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSupply indicates an expected call of TotalSupply.
func (mr *MockTxMockRecorder) TotalSupply(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSupply", reflect.TypeOf((*MockTx)(nil).TotalSupply), contract)
}

// Transfer mocks base method.
func (m *MockTx) Transfer(contract common.Address, eventTransfer *model.ERC721Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", contract, eventTransfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockTxMockRecorder) Transfer(contract, eventTransfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockTx)(nil).Transfer), contract, eventTransfer)
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// BalanceOf mocks base method.
func (m *MockState) BalanceOf(contract, owner common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceOf", contract, owner)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceOf indicates an expected call of BalanceOf.
func (mr *MockStateMockRecorder) BalanceOf(contract, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceOf", reflect.TypeOf((*MockState)(nil).BalanceOf), contract, owner)
}

// Checkout mocks base method.
func (m *MockState) Checkout(contract common.Address, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockStateMockRecorder) Checkout(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockState)(nil).Checkout), contract, blockNumber)
}

// CreateTreesForContract mocks base method.
func (m *MockState) CreateTreesForContract(contract common.Address) (ownership.Tree, enumerated.Tree, enumeratedtotal.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTreesForContract", contract)
	ret0, _ := ret[0].(ownership.Tree)
	ret1, _ := ret[1].(enumerated.Tree)
	ret2, _ := ret[2].(enumeratedtotal.Tree)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateTreesForContract indicates an expected call of CreateTreesForContract.
func (mr *MockStateMockRecorder) CreateTreesForContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTreesForContract", reflect.TypeOf((*MockState)(nil).CreateTreesForContract), contract)
}

// DeleteRootTag mocks base method.
func (m *MockState) DeleteRootTag(contract common.Address, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRootTag", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRootTag indicates an expected call of DeleteRootTag.
func (mr *MockStateMockRecorder) DeleteRootTag(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRootTag", reflect.TypeOf((*MockState)(nil).DeleteRootTag), contract, blockNumber)
}

// Get mocks base method.
func (m *MockState) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStateMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockState)(nil).Get), key)
}

// GetLastTaggedBlock mocks base method.
func (m *MockState) GetLastTaggedBlock(contract common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastTaggedBlock", contract)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastTaggedBlock indicates an expected call of GetLastTaggedBlock.
func (mr *MockStateMockRecorder) GetLastTaggedBlock(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastTaggedBlock", reflect.TypeOf((*MockState)(nil).GetLastTaggedBlock), contract)
}

// IsTreeSetForContract mocks base method.
func (m *MockState) IsTreeSetForContract(contract common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTreeSetForContract", contract)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTreeSetForContract indicates an expected call of IsTreeSetForContract.
func (mr *MockStateMockRecorder) IsTreeSetForContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTreeSetForContract", reflect.TypeOf((*MockState)(nil).IsTreeSetForContract), contract)
}

// Mint mocks base method.
func (m *MockState) Mint(contract common.Address, mintEvent *model.MintedWithExternalURI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mint", contract, mintEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mint indicates an expected call of Mint.
func (mr *MockStateMockRecorder) Mint(contract, mintEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mint", reflect.TypeOf((*MockState)(nil).Mint), contract, mintEvent)
}

// OwnerOf mocks base method.
func (m *MockState) OwnerOf(contract common.Address, tokenId *big.Int) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerOf", contract, tokenId)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnerOf indicates an expected call of OwnerOf.
func (mr *MockStateMockRecorder) OwnerOf(contract, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerOf", reflect.TypeOf((*MockState)(nil).OwnerOf), contract, tokenId)
}

// SetTreesForContract mocks base method.
func (m *MockState) SetTreesForContract(contract common.Address, ownershipTree ownership.Tree, enumeratedTree enumerated.Tree, enumeratedTotalTree enumeratedtotal.Tree) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTreesForContract", contract, ownershipTree, enumeratedTree, enumeratedTotalTree)
}

// SetTreesForContract indicates an expected call of SetTreesForContract.
func (mr *MockStateMockRecorder) SetTreesForContract(contract, ownershipTree, enumeratedTree, enumeratedTotalTree any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTreesForContract", reflect.TypeOf((*MockState)(nil).SetTreesForContract), contract, ownershipTree, enumeratedTree, enumeratedTotalTree)
}

// TagRoot mocks base method.
func (m *MockState) TagRoot(contract common.Address, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagRoot", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagRoot indicates an expected call of TagRoot.
func (mr *MockStateMockRecorder) TagRoot(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagRoot", reflect.TypeOf((*MockState)(nil).TagRoot), contract, blockNumber)
}

// TokenByIndex mocks base method.
func (m *MockState) TokenByIndex(contract common.Address, idx int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenByIndex", contract, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenByIndex indicates an expected call of TokenByIndex.
func (mr *MockStateMockRecorder) TokenByIndex(contract, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenByIndex", reflect.TypeOf((*MockState)(nil).TokenByIndex), contract, idx)
}

// TokenOfOwnerByIndex mocks base method.
func (m *MockState) TokenOfOwnerByIndex(contract, owner common.Address, idx int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenOfOwnerByIndex", contract, owner, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenOfOwnerByIndex indicates an expected call of TokenOfOwnerByIndex.
func (mr *MockStateMockRecorder) TokenOfOwnerByIndex(contract, owner, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenOfOwnerByIndex", reflect.TypeOf((*MockState)(nil).TokenOfOwnerByIndex), contract, owner, idx)
}

// TokenURI mocks base method.
func (m *MockState) TokenURI(contract common.Address, tokenId *big.Int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenURI", contract, tokenId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenURI indicates an expected call of TokenURI.
func (mr *MockStateMockRecorder) TokenURI(contract, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenURI", reflect.TypeOf((*MockState)(nil).TokenURI), contract, tokenId)
}

// TotalSupply mocks base method.
func (m *MockState) TotalSupply(contract common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalSupply", contract)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSupply indicates an expected call of TotalSupply.
func (mr *MockStateMockRecorder) TotalSupply(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSupply", reflect.TypeOf((*MockState)(nil).TotalSupply), contract)
}

// Transfer mocks base method.
func (m *MockState) Transfer(contract common.Address, eventTransfer *model.ERC721Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", contract, eventTransfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockStateMockRecorder) Transfer(contract, eventTransfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockState)(nil).Transfer), contract, eventTransfer)
}

// MockOwnershipContractState is a mock of OwnershipContractState interface.
type MockOwnershipContractState struct {
	ctrl     *gomock.Controller
	recorder *MockOwnershipContractStateMockRecorder
}

// MockOwnershipContractStateMockRecorder is the mock recorder for MockOwnershipContractState.
type MockOwnershipContractStateMockRecorder struct {
	mock *MockOwnershipContractState
}

// NewMockOwnershipContractState creates a new mock instance.
func NewMockOwnershipContractState(ctrl *gomock.Controller) *MockOwnershipContractState {
	mock := &MockOwnershipContractState{ctrl: ctrl}
	mock.recorder = &MockOwnershipContractStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnershipContractState) EXPECT() *MockOwnershipContractStateMockRecorder {
	return m.recorder
}

// GetAllERC721UniversalContracts mocks base method.
func (m *MockOwnershipContractState) GetAllERC721UniversalContracts() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllERC721UniversalContracts")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllERC721UniversalContracts indicates an expected call of GetAllERC721UniversalContracts.
func (mr *MockOwnershipContractStateMockRecorder) GetAllERC721UniversalContracts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllERC721UniversalContracts", reflect.TypeOf((*MockOwnershipContractState)(nil).GetAllERC721UniversalContracts))
}

// GetCollectionAddress mocks base method.
func (m *MockOwnershipContractState) GetCollectionAddress(contract string) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionAddress", contract)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionAddress indicates an expected call of GetCollectionAddress.
func (mr *MockOwnershipContractStateMockRecorder) GetCollectionAddress(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionAddress", reflect.TypeOf((*MockOwnershipContractState)(nil).GetCollectionAddress), contract)
}

// GetExistingERC721UniversalContracts mocks base method.
func (m *MockOwnershipContractState) GetExistingERC721UniversalContracts(contracts []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExistingERC721UniversalContracts", contracts)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExistingERC721UniversalContracts indicates an expected call of GetExistingERC721UniversalContracts.
func (mr *MockOwnershipContractStateMockRecorder) GetExistingERC721UniversalContracts(contracts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExistingERC721UniversalContracts", reflect.TypeOf((*MockOwnershipContractState)(nil).GetExistingERC721UniversalContracts), contracts)
}

// HasERC721UniversalContract mocks base method.
func (m *MockOwnershipContractState) HasERC721UniversalContract(contract string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasERC721UniversalContract", contract)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasERC721UniversalContract indicates an expected call of HasERC721UniversalContract.
func (mr *MockOwnershipContractStateMockRecorder) HasERC721UniversalContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasERC721UniversalContract", reflect.TypeOf((*MockOwnershipContractState)(nil).HasERC721UniversalContract), contract)
}

// StoreERC721UniversalContracts mocks base method.
func (m *MockOwnershipContractState) StoreERC721UniversalContracts(universalContracts []model.ERC721UniversalContract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreERC721UniversalContracts", universalContracts)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreERC721UniversalContracts indicates an expected call of StoreERC721UniversalContracts.
func (mr *MockOwnershipContractStateMockRecorder) StoreERC721UniversalContracts(universalContracts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreERC721UniversalContracts", reflect.TypeOf((*MockOwnershipContractState)(nil).StoreERC721UniversalContracts), universalContracts)
}

// MockEvolutionContractState is a mock of EvolutionContractState interface.
type MockEvolutionContractState struct {
	ctrl     *gomock.Controller
	recorder *MockEvolutionContractStateMockRecorder
}

// MockEvolutionContractStateMockRecorder is the mock recorder for MockEvolutionContractState.
type MockEvolutionContractStateMockRecorder struct {
	mock *MockEvolutionContractState
}

// NewMockEvolutionContractState creates a new mock instance.
func NewMockEvolutionContractState(ctrl *gomock.Controller) *MockEvolutionContractState {
	mock := &MockEvolutionContractState{ctrl: ctrl}
	mock.recorder = &MockEvolutionContractStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvolutionContractState) EXPECT() *MockEvolutionContractStateMockRecorder {
	return m.recorder
}

// GetMintedWithExternalURIEvents mocks base method.
func (m *MockEvolutionContractState) GetMintedWithExternalURIEvents(contract string) ([]model.MintedWithExternalURI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMintedWithExternalURIEvents", contract)
	ret0, _ := ret[0].([]model.MintedWithExternalURI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMintedWithExternalURIEvents indicates an expected call of GetMintedWithExternalURIEvents.
func (mr *MockEvolutionContractStateMockRecorder) GetMintedWithExternalURIEvents(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMintedWithExternalURIEvents", reflect.TypeOf((*MockEvolutionContractState)(nil).GetMintedWithExternalURIEvents), contract)
}

// StoreMintedWithExternalURIEvents mocks base method.
func (m *MockEvolutionContractState) StoreMintedWithExternalURIEvents(contract string, events []model.MintedWithExternalURI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMintedWithExternalURIEvents", contract, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMintedWithExternalURIEvents indicates an expected call of StoreMintedWithExternalURIEvents.
func (mr *MockEvolutionContractStateMockRecorder) StoreMintedWithExternalURIEvents(contract, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMintedWithExternalURIEvents", reflect.TypeOf((*MockEvolutionContractState)(nil).StoreMintedWithExternalURIEvents), contract, events)
}

// MockOwnershipSyncState is a mock of OwnershipSyncState interface.
type MockOwnershipSyncState struct {
	ctrl     *gomock.Controller
	recorder *MockOwnershipSyncStateMockRecorder
}

// MockOwnershipSyncStateMockRecorder is the mock recorder for MockOwnershipSyncState.
type MockOwnershipSyncStateMockRecorder struct {
	mock *MockOwnershipSyncState
}

// NewMockOwnershipSyncState creates a new mock instance.
func NewMockOwnershipSyncState(ctrl *gomock.Controller) *MockOwnershipSyncState {
	mock := &MockOwnershipSyncState{ctrl: ctrl}
	mock.recorder = &MockOwnershipSyncStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnershipSyncState) EXPECT() *MockOwnershipSyncStateMockRecorder {
	return m.recorder
}

// GetCurrentEvoEventsIndexForOwnershipContract mocks base method.
func (m *MockOwnershipSyncState) GetCurrentEvoEventsIndexForOwnershipContract(contract string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEvoEventsIndexForOwnershipContract", contract)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentEvoEventsIndexForOwnershipContract indicates an expected call of GetCurrentEvoEventsIndexForOwnershipContract.
func (mr *MockOwnershipSyncStateMockRecorder) GetCurrentEvoEventsIndexForOwnershipContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEvoEventsIndexForOwnershipContract", reflect.TypeOf((*MockOwnershipSyncState)(nil).GetCurrentEvoEventsIndexForOwnershipContract), contract)
}

// GetCurrentOwnershipBlock mocks base method.
func (m *MockOwnershipSyncState) GetCurrentOwnershipBlock() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentOwnershipBlock")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentOwnershipBlock indicates an expected call of GetCurrentOwnershipBlock.
func (mr *MockOwnershipSyncStateMockRecorder) GetCurrentOwnershipBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentOwnershipBlock", reflect.TypeOf((*MockOwnershipSyncState)(nil).GetCurrentOwnershipBlock))
}

// GetOwnershipEndRangeBlockHash mocks base method.
func (m *MockOwnershipSyncState) GetOwnershipEndRangeBlockHash() (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnershipEndRangeBlockHash")
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnershipEndRangeBlockHash indicates an expected call of GetOwnershipEndRangeBlockHash.
func (mr *MockOwnershipSyncStateMockRecorder) GetOwnershipEndRangeBlockHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnershipEndRangeBlockHash", reflect.TypeOf((*MockOwnershipSyncState)(nil).GetOwnershipEndRangeBlockHash))
}

// SetCurrentEvoEventsIndexForOwnershipContract mocks base method.
func (m *MockOwnershipSyncState) SetCurrentEvoEventsIndexForOwnershipContract(contract string, blockNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentEvoEventsIndexForOwnershipContract", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentEvoEventsIndexForOwnershipContract indicates an expected call of SetCurrentEvoEventsIndexForOwnershipContract.
func (mr *MockOwnershipSyncStateMockRecorder) SetCurrentEvoEventsIndexForOwnershipContract(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentEvoEventsIndexForOwnershipContract", reflect.TypeOf((*MockOwnershipSyncState)(nil).SetCurrentEvoEventsIndexForOwnershipContract), contract, blockNumber)
}

// SetCurrentOwnershipBlock mocks base method.
func (m *MockOwnershipSyncState) SetCurrentOwnershipBlock(number uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentOwnershipBlock", number)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentOwnershipBlock indicates an expected call of SetCurrentOwnershipBlock.
func (mr *MockOwnershipSyncStateMockRecorder) SetCurrentOwnershipBlock(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentOwnershipBlock", reflect.TypeOf((*MockOwnershipSyncState)(nil).SetCurrentOwnershipBlock), number)
}

// SetOwnershipEndRangeBlockHash mocks base method.
func (m *MockOwnershipSyncState) SetOwnershipEndRangeBlockHash(blockHash common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnershipEndRangeBlockHash", blockHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnershipEndRangeBlockHash indicates an expected call of SetOwnershipEndRangeBlockHash.
func (mr *MockOwnershipSyncStateMockRecorder) SetOwnershipEndRangeBlockHash(blockHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnershipEndRangeBlockHash", reflect.TypeOf((*MockOwnershipSyncState)(nil).SetOwnershipEndRangeBlockHash), blockHash)
}

// MockEvolutionSyncState is a mock of EvolutionSyncState interface.
type MockEvolutionSyncState struct {
	ctrl     *gomock.Controller
	recorder *MockEvolutionSyncStateMockRecorder
}

// MockEvolutionSyncStateMockRecorder is the mock recorder for MockEvolutionSyncState.
type MockEvolutionSyncStateMockRecorder struct {
	mock *MockEvolutionSyncState
}

// NewMockEvolutionSyncState creates a new mock instance.
func NewMockEvolutionSyncState(ctrl *gomock.Controller) *MockEvolutionSyncState {
	mock := &MockEvolutionSyncState{ctrl: ctrl}
	mock.recorder = &MockEvolutionSyncStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvolutionSyncState) EXPECT() *MockEvolutionSyncStateMockRecorder {
	return m.recorder
}

// GetCurrentEvoBlock mocks base method.
func (m *MockEvolutionSyncState) GetCurrentEvoBlock() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEvoBlock")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentEvoBlock indicates an expected call of GetCurrentEvoBlock.
func (mr *MockEvolutionSyncStateMockRecorder) GetCurrentEvoBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEvoBlock", reflect.TypeOf((*MockEvolutionSyncState)(nil).GetCurrentEvoBlock))
}

// GetCurrentEvoBlockTimestamp mocks base method.
func (m *MockEvolutionSyncState) GetCurrentEvoBlockTimestamp() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentEvoBlockTimestamp")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentEvoBlockTimestamp indicates an expected call of GetCurrentEvoBlockTimestamp.
func (mr *MockEvolutionSyncStateMockRecorder) GetCurrentEvoBlockTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentEvoBlockTimestamp", reflect.TypeOf((*MockEvolutionSyncState)(nil).GetCurrentEvoBlockTimestamp))
}

// GetEvoEndRangeBlockHash mocks base method.
func (m *MockEvolutionSyncState) GetEvoEndRangeBlockHash() (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvoEndRangeBlockHash")
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvoEndRangeBlockHash indicates an expected call of GetEvoEndRangeBlockHash.
func (mr *MockEvolutionSyncStateMockRecorder) GetEvoEndRangeBlockHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvoEndRangeBlockHash", reflect.TypeOf((*MockEvolutionSyncState)(nil).GetEvoEndRangeBlockHash))
}

// SetCurrentEvoBlock mocks base method.
func (m *MockEvolutionSyncState) SetCurrentEvoBlock(number uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentEvoBlock", number)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentEvoBlock indicates an expected call of SetCurrentEvoBlock.
func (mr *MockEvolutionSyncStateMockRecorder) SetCurrentEvoBlock(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentEvoBlock", reflect.TypeOf((*MockEvolutionSyncState)(nil).SetCurrentEvoBlock), number)
}

// SetCurrentEvoBlockTimestamp mocks base method.
func (m *MockEvolutionSyncState) SetCurrentEvoBlockTimestamp(number uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCurrentEvoBlockTimestamp", number)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCurrentEvoBlockTimestamp indicates an expected call of SetCurrentEvoBlockTimestamp.
func (mr *MockEvolutionSyncStateMockRecorder) SetCurrentEvoBlockTimestamp(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentEvoBlockTimestamp", reflect.TypeOf((*MockEvolutionSyncState)(nil).SetCurrentEvoBlockTimestamp), number)
}

// SetEvoEndRangeBlockHash mocks base method.
func (m *MockEvolutionSyncState) SetEvoEndRangeBlockHash(blockHash common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEvoEndRangeBlockHash", blockHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEvoEndRangeBlockHash indicates an expected call of SetEvoEndRangeBlockHash.
func (mr *MockEvolutionSyncStateMockRecorder) SetEvoEndRangeBlockHash(blockHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEvoEndRangeBlockHash", reflect.TypeOf((*MockEvolutionSyncState)(nil).SetEvoEndRangeBlockHash), blockHash)
}
