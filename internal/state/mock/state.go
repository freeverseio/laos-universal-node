// Code generated by MockGen. DO NOT EDIT.
// Source: internal/state/state.go
//
// Generated by this command:
//
//	mockgen -source=internal/state/state.go -destination=internal/state/mock/state.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	model "github.com/freeverseio/laos-universal-node/internal/platform/model"
	scan "github.com/freeverseio/laos-universal-node/internal/scan"
	state "github.com/freeverseio/laos-universal-node/internal/state"
	enumerated "github.com/freeverseio/laos-universal-node/internal/state/enumerated"
	enumeratedtotal "github.com/freeverseio/laos-universal-node/internal/state/enumeratedtotal"
	ownership "github.com/freeverseio/laos-universal-node/internal/state/ownership"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// NewTransaction mocks base method.
func (m *MockService) NewTransaction() state.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction")
	ret0, _ := ret[0].(state.Tx)
	return ret0
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockServiceMockRecorder) NewTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockService)(nil).NewTransaction))
}

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// BalanceOf mocks base method.
func (m *MockTx) BalanceOf(contract, owner common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceOf", contract, owner)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceOf indicates an expected call of BalanceOf.
func (mr *MockTxMockRecorder) BalanceOf(contract, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceOf", reflect.TypeOf((*MockTx)(nil).BalanceOf), contract, owner)
}

// Checkout mocks base method.
func (m *MockTx) Checkout(contract common.Address, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockTxMockRecorder) Checkout(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockTx)(nil).Checkout), contract, blockNumber)
}

// Commit mocks base method.
func (m *MockTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
}

// CreateTreesForContract mocks base method.
func (m *MockTx) CreateTreesForContract(contract common.Address) (ownership.Tree, enumerated.Tree, enumeratedtotal.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTreesForContract", contract)
	ret0, _ := ret[0].(ownership.Tree)
	ret1, _ := ret[1].(enumerated.Tree)
	ret2, _ := ret[2].(enumeratedtotal.Tree)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateTreesForContract indicates an expected call of CreateTreesForContract.
func (mr *MockTxMockRecorder) CreateTreesForContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTreesForContract", reflect.TypeOf((*MockTx)(nil).CreateTreesForContract), contract)
}

// Discard mocks base method.
func (m *MockTx) Discard() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Discard")
}

// Discard indicates an expected call of Discard.
func (mr *MockTxMockRecorder) Discard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockTx)(nil).Discard))
}

// Get mocks base method.
func (m *MockTx) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTxMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTx)(nil).Get), key)
}

// GetEvoChainEvents mocks base method.
func (m *MockTx) GetEvoChainEvents(contract common.Address) ([]model.MintedWithExternalURI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvoChainEvents", contract)
	ret0, _ := ret[0].([]model.MintedWithExternalURI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvoChainEvents indicates an expected call of GetEvoChainEvents.
func (mr *MockTxMockRecorder) GetEvoChainEvents(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvoChainEvents", reflect.TypeOf((*MockTx)(nil).GetEvoChainEvents), contract)
}

// Mint mocks base method.
func (m *MockTx) Mint(contract common.Address, tokenId *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mint", contract, tokenId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mint indicates an expected call of Mint.
func (mr *MockTxMockRecorder) Mint(contract, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mint", reflect.TypeOf((*MockTx)(nil).Mint), contract, tokenId)
}

// OwnerOf mocks base method.
func (m *MockTx) OwnerOf(contract common.Address, tokenId *big.Int) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerOf", contract, tokenId)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnerOf indicates an expected call of OwnerOf.
func (mr *MockTxMockRecorder) OwnerOf(contract, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerOf", reflect.TypeOf((*MockTx)(nil).OwnerOf), contract, tokenId)
}

// SetTreesForContract mocks base method.
func (m *MockTx) SetTreesForContract(contract common.Address, ownershipTree ownership.Tree, enumeratedTree enumerated.Tree, enumeratedTotalTree enumeratedtotal.Tree) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTreesForContract", contract, ownershipTree, enumeratedTree, enumeratedTotalTree)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTreesForContract indicates an expected call of SetTreesForContract.
func (mr *MockTxMockRecorder) SetTreesForContract(contract, ownershipTree, enumeratedTree, enumeratedTotalTree any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTreesForContract", reflect.TypeOf((*MockTx)(nil).SetTreesForContract), contract, ownershipTree, enumeratedTree, enumeratedTotalTree)
}

// StoreERC721UniversalContracts mocks base method.
func (m *MockTx) StoreERC721UniversalContracts(universalContracts []model.ERC721UniversalContract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreERC721UniversalContracts", universalContracts)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreERC721UniversalContracts indicates an expected call of StoreERC721UniversalContracts.
func (mr *MockTxMockRecorder) StoreERC721UniversalContracts(universalContracts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreERC721UniversalContracts", reflect.TypeOf((*MockTx)(nil).StoreERC721UniversalContracts), universalContracts)
}

// StoreEvoChainMintEvents mocks base method.
func (m *MockTx) StoreEvoChainMintEvents(contract common.Address, events []model.MintedWithExternalURI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEvoChainMintEvents", contract, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreEvoChainMintEvents indicates an expected call of StoreEvoChainMintEvents.
func (mr *MockTxMockRecorder) StoreEvoChainMintEvents(contract, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEvoChainMintEvents", reflect.TypeOf((*MockTx)(nil).StoreEvoChainMintEvents), contract, events)
}

// TagRoot mocks base method.
func (m *MockTx) TagRoot(contract common.Address, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagRoot", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagRoot indicates an expected call of TagRoot.
func (mr *MockTxMockRecorder) TagRoot(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagRoot", reflect.TypeOf((*MockTx)(nil).TagRoot), contract, blockNumber)
}

// TokenByIndex mocks base method.
func (m *MockTx) TokenByIndex(contract common.Address, idx int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenByIndex", contract, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenByIndex indicates an expected call of TokenByIndex.
func (mr *MockTxMockRecorder) TokenByIndex(contract, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenByIndex", reflect.TypeOf((*MockTx)(nil).TokenByIndex), contract, idx)
}

// TokenOfOwnerByIndex mocks base method.
func (m *MockTx) TokenOfOwnerByIndex(contract, owner common.Address, idx int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenOfOwnerByIndex", contract, owner, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenOfOwnerByIndex indicates an expected call of TokenOfOwnerByIndex.
func (mr *MockTxMockRecorder) TokenOfOwnerByIndex(contract, owner, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenOfOwnerByIndex", reflect.TypeOf((*MockTx)(nil).TokenOfOwnerByIndex), contract, owner, idx)
}

// TotalSupply mocks base method.
func (m *MockTx) TotalSupply(contract common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalSupply", contract)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSupply indicates an expected call of TotalSupply.
func (mr *MockTxMockRecorder) TotalSupply(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSupply", reflect.TypeOf((*MockTx)(nil).TotalSupply), contract)
}

// Transfer mocks base method.
func (m *MockTx) Transfer(contract common.Address, eventTransfer scan.EventTransfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", contract, eventTransfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockTxMockRecorder) Transfer(contract, eventTransfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockTx)(nil).Transfer), contract, eventTransfer)
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// BalanceOf mocks base method.
func (m *MockState) BalanceOf(contract, owner common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceOf", contract, owner)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceOf indicates an expected call of BalanceOf.
func (mr *MockStateMockRecorder) BalanceOf(contract, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceOf", reflect.TypeOf((*MockState)(nil).BalanceOf), contract, owner)
}

// Checkout mocks base method.
func (m *MockState) Checkout(contract common.Address, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockStateMockRecorder) Checkout(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockState)(nil).Checkout), contract, blockNumber)
}

// Commit mocks base method.
func (m *MockState) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockStateMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockState)(nil).Commit))
}

// CreateTreesForContract mocks base method.
func (m *MockState) CreateTreesForContract(contract common.Address) (ownership.Tree, enumerated.Tree, enumeratedtotal.Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTreesForContract", contract)
	ret0, _ := ret[0].(ownership.Tree)
	ret1, _ := ret[1].(enumerated.Tree)
	ret2, _ := ret[2].(enumeratedtotal.Tree)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// CreateTreesForContract indicates an expected call of CreateTreesForContract.
func (mr *MockStateMockRecorder) CreateTreesForContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTreesForContract", reflect.TypeOf((*MockState)(nil).CreateTreesForContract), contract)
}

// Discard mocks base method.
func (m *MockState) Discard() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Discard")
}

// Discard indicates an expected call of Discard.
func (mr *MockStateMockRecorder) Discard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockState)(nil).Discard))
}

// Get mocks base method.
func (m *MockState) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStateMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockState)(nil).Get), key)
}

// Mint mocks base method.
func (m *MockState) Mint(contract common.Address, tokenId *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mint", contract, tokenId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mint indicates an expected call of Mint.
func (mr *MockStateMockRecorder) Mint(contract, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mint", reflect.TypeOf((*MockState)(nil).Mint), contract, tokenId)
}

// OwnerOf mocks base method.
func (m *MockState) OwnerOf(contract common.Address, tokenId *big.Int) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerOf", contract, tokenId)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnerOf indicates an expected call of OwnerOf.
func (mr *MockStateMockRecorder) OwnerOf(contract, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerOf", reflect.TypeOf((*MockState)(nil).OwnerOf), contract, tokenId)
}

// SetTreesForContract mocks base method.
func (m *MockState) SetTreesForContract(contract common.Address, ownershipTree ownership.Tree, enumeratedTree enumerated.Tree, enumeratedTotalTree enumeratedtotal.Tree) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTreesForContract", contract, ownershipTree, enumeratedTree, enumeratedTotalTree)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTreesForContract indicates an expected call of SetTreesForContract.
func (mr *MockStateMockRecorder) SetTreesForContract(contract, ownershipTree, enumeratedTree, enumeratedTotalTree any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTreesForContract", reflect.TypeOf((*MockState)(nil).SetTreesForContract), contract, ownershipTree, enumeratedTree, enumeratedTotalTree)
}

// TagRoot mocks base method.
func (m *MockState) TagRoot(contract common.Address, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagRoot", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagRoot indicates an expected call of TagRoot.
func (mr *MockStateMockRecorder) TagRoot(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagRoot", reflect.TypeOf((*MockState)(nil).TagRoot), contract, blockNumber)
}

// TokenByIndex mocks base method.
func (m *MockState) TokenByIndex(contract common.Address, idx int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenByIndex", contract, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenByIndex indicates an expected call of TokenByIndex.
func (mr *MockStateMockRecorder) TokenByIndex(contract, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenByIndex", reflect.TypeOf((*MockState)(nil).TokenByIndex), contract, idx)
}

// TokenOfOwnerByIndex mocks base method.
func (m *MockState) TokenOfOwnerByIndex(contract, owner common.Address, idx int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenOfOwnerByIndex", contract, owner, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenOfOwnerByIndex indicates an expected call of TokenOfOwnerByIndex.
func (mr *MockStateMockRecorder) TokenOfOwnerByIndex(contract, owner, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenOfOwnerByIndex", reflect.TypeOf((*MockState)(nil).TokenOfOwnerByIndex), contract, owner, idx)
}

// TotalSupply mocks base method.
func (m *MockState) TotalSupply(contract common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalSupply", contract)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSupply indicates an expected call of TotalSupply.
func (mr *MockStateMockRecorder) TotalSupply(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSupply", reflect.TypeOf((*MockState)(nil).TotalSupply), contract)
}

// Transfer mocks base method.
func (m *MockState) Transfer(contract common.Address, eventTransfer scan.EventTransfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", contract, eventTransfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockStateMockRecorder) Transfer(contract, eventTransfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockState)(nil).Transfer), contract, eventTransfer)
}

// MockContractState is a mock of ContractState interface.
type MockContractState struct {
	ctrl     *gomock.Controller
	recorder *MockContractStateMockRecorder
}

// MockContractStateMockRecorder is the mock recorder for MockContractState.
type MockContractStateMockRecorder struct {
	mock *MockContractState
}

// NewMockContractState creates a new mock instance.
func NewMockContractState(ctrl *gomock.Controller) *MockContractState {
	mock := &MockContractState{ctrl: ctrl}
	mock.recorder = &MockContractStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractState) EXPECT() *MockContractStateMockRecorder {
	return m.recorder
}

// GetEvoChainEvents mocks base method.
func (m *MockContractState) GetEvoChainEvents(contract common.Address) ([]model.MintedWithExternalURI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvoChainEvents", contract)
	ret0, _ := ret[0].([]model.MintedWithExternalURI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvoChainEvents indicates an expected call of GetEvoChainEvents.
func (mr *MockContractStateMockRecorder) GetEvoChainEvents(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvoChainEvents", reflect.TypeOf((*MockContractState)(nil).GetEvoChainEvents), contract)
}

// StoreERC721UniversalContracts mocks base method.
func (m *MockContractState) StoreERC721UniversalContracts(universalContracts []model.ERC721UniversalContract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreERC721UniversalContracts", universalContracts)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreERC721UniversalContracts indicates an expected call of StoreERC721UniversalContracts.
func (mr *MockContractStateMockRecorder) StoreERC721UniversalContracts(universalContracts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreERC721UniversalContracts", reflect.TypeOf((*MockContractState)(nil).StoreERC721UniversalContracts), universalContracts)
}

// StoreEvoChainMintEvents mocks base method.
func (m *MockContractState) StoreEvoChainMintEvents(contract common.Address, events []model.MintedWithExternalURI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEvoChainMintEvents", contract, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreEvoChainMintEvents indicates an expected call of StoreEvoChainMintEvents.
func (mr *MockContractStateMockRecorder) StoreEvoChainMintEvents(contract, events any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEvoChainMintEvents", reflect.TypeOf((*MockContractState)(nil).StoreEvoChainMintEvents), contract, events)
}
