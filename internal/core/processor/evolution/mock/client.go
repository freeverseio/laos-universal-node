// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/processor/evolution/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/processor/evolution/client.go -destination=internal/core/processor/evolution/mock/client.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	big "math/big"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLaosRPCRequests is a mock of LaosRPCRequests interface.
type MockLaosRPCRequests struct {
	ctrl     *gomock.Controller
	recorder *MockLaosRPCRequestsMockRecorder
}

// MockLaosRPCRequestsMockRecorder is the mock recorder for MockLaosRPCRequests.
type MockLaosRPCRequestsMockRecorder struct {
	mock *MockLaosRPCRequests
}

// NewMockLaosRPCRequests creates a new mock instance.
func NewMockLaosRPCRequests(ctrl *gomock.Controller) *MockLaosRPCRequests {
	mock := &MockLaosRPCRequests{ctrl: ctrl}
	mock.recorder = &MockLaosRPCRequestsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLaosRPCRequests) EXPECT() *MockLaosRPCRequestsMockRecorder {
	return m.recorder
}

// BlockNumber mocks base method.
func (m *MockLaosRPCRequests) BlockNumber(blockHash string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockNumber", blockHash)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockNumber indicates an expected call of BlockNumber.
func (mr *MockLaosRPCRequestsMockRecorder) BlockNumber(blockHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumber", reflect.TypeOf((*MockLaosRPCRequests)(nil).BlockNumber), blockHash)
}

// LatestFinalizedBlockHash mocks base method.
func (m *MockLaosRPCRequests) LatestFinalizedBlockHash() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestFinalizedBlockHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestFinalizedBlockHash indicates an expected call of LatestFinalizedBlockHash.
func (mr *MockLaosRPCRequestsMockRecorder) LatestFinalizedBlockHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestFinalizedBlockHash", reflect.TypeOf((*MockLaosRPCRequests)(nil).LatestFinalizedBlockHash))
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), req)
}
