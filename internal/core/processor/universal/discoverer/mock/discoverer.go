// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/processor/universal/discoverer/discoverer.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/processor/universal/discoverer/discoverer.go -destination=internal/core/processor/universal/discoverer/mock/discoverer.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	state "github.com/freeverseio/laos-universal-node/internal/platform/state"
	gomock "go.uber.org/mock/gomock"
)

// MockDiscoverer is a mock of Discoverer interface.
type MockDiscoverer struct {
	ctrl     *gomock.Controller
	recorder *MockDiscovererMockRecorder
}

// MockDiscovererMockRecorder is the mock recorder for MockDiscoverer.
type MockDiscovererMockRecorder struct {
	mock *MockDiscoverer
}

// NewMockDiscoverer creates a new mock instance.
func NewMockDiscoverer(ctrl *gomock.Controller) *MockDiscoverer {
	mock := &MockDiscoverer{ctrl: ctrl}
	mock.recorder = &MockDiscovererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscoverer) EXPECT() *MockDiscovererMockRecorder {
	return m.recorder
}

// DiscoverContracts mocks base method.
func (m *MockDiscoverer) DiscoverContracts(ctx context.Context, tx state.Tx, startingBlock, lastBlock uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverContracts", ctx, tx, startingBlock, lastBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// DiscoverContracts indicates an expected call of DiscoverContracts.
func (mr *MockDiscovererMockRecorder) DiscoverContracts(ctx, tx, startingBlock, lastBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverContracts", reflect.TypeOf((*MockDiscoverer)(nil).DiscoverContracts), ctx, tx, startingBlock, lastBlock)
}

// GetContracts mocks base method.
func (m *MockDiscoverer) GetContracts(tx state.Tx) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContracts", tx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContracts indicates an expected call of GetContracts.
func (mr *MockDiscovererMockRecorder) GetContracts(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContracts", reflect.TypeOf((*MockDiscoverer)(nil).GetContracts), tx)
}

// ShouldDiscover mocks base method.
func (m *MockDiscoverer) ShouldDiscover(tx state.Tx, startingBlock, lastBlock uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldDiscover", tx, startingBlock, lastBlock)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldDiscover indicates an expected call of ShouldDiscover.
func (mr *MockDiscovererMockRecorder) ShouldDiscover(tx, startingBlock, lastBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldDiscover", reflect.TypeOf((*MockDiscoverer)(nil).ShouldDiscover), tx, startingBlock, lastBlock)
}
