// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/processor/universal/discoverer/validator/validator.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/processor/universal/discoverer/validator/validator.go -destination=internal/core/processor/universal/discoverer/validator/mock/validator.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/freeverseio/laos-universal-node/internal/platform/model"
	scan "github.com/freeverseio/laos-universal-node/internal/platform/scan"
	gomock "go.uber.org/mock/gomock"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockValidator) Validate(event scan.EventNewERC721Universal) (model.ERC721UniversalContract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", event)
	ret0, _ := ret[0].(model.ERC721UniversalContract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockValidatorMockRecorder) Validate(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockValidator)(nil).Validate), event)
}
