// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/processor/universal/updater/updater.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/processor/universal/updater/updater.go -destination=internal/core/processor/universal/updater/mock/updater.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/freeverseio/laos-universal-node/internal/platform/model"
	state "github.com/freeverseio/laos-universal-node/internal/platform/state"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdater is a mock of Updater interface.
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater.
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance.
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// GetModelTransferEvents mocks base method.
func (m *MockUpdater) GetModelTransferEvents(ctx context.Context, startingBlock, lastBlock uint64, contracts []string) (map[string][]model.ERC721Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTransferEvents", ctx, startingBlock, lastBlock, contracts)
	ret0, _ := ret[0].(map[string][]model.ERC721Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTransferEvents indicates an expected call of GetModelTransferEvents.
func (mr *MockUpdaterMockRecorder) GetModelTransferEvents(ctx, startingBlock, lastBlock, contracts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTransferEvents", reflect.TypeOf((*MockUpdater)(nil).GetModelTransferEvents), ctx, startingBlock, lastBlock, contracts)
}

// UpdateState mocks base method.
func (m *MockUpdater) UpdateState(ctx context.Context, tx state.Tx, contracts []string, modelTransferEvents map[string][]model.ERC721Transfer, lastBlockData model.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", ctx, tx, contracts, modelTransferEvents, lastBlockData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockUpdaterMockRecorder) UpdateState(ctx, tx, contracts, modelTransferEvents, lastBlockData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockUpdater)(nil).UpdateState), ctx, tx, contracts, modelTransferEvents, lastBlockData)
}
