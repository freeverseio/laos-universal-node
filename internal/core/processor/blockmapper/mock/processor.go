// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/processor/blockmapper/processor.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/processor/blockmapper/processor.go -destination=internal/core/processor/blockmapper/mock/processor.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// IsMappingSyncedWithProcessing mocks base method.
func (m *MockProcessor) IsMappingSyncedWithProcessing() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMappingSyncedWithProcessing")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMappingSyncedWithProcessing indicates an expected call of IsMappingSyncedWithProcessing.
func (mr *MockProcessorMockRecorder) IsMappingSyncedWithProcessing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMappingSyncedWithProcessing", reflect.TypeOf((*MockProcessor)(nil).IsMappingSyncedWithProcessing))
}

// MapNextBlock mocks base method.
func (m *MockProcessor) MapNextBlock(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapNextBlock", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MapNextBlock indicates an expected call of MapNextBlock.
func (mr *MockProcessorMockRecorder) MapNextBlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapNextBlock", reflect.TypeOf((*MockProcessor)(nil).MapNextBlock), ctx)
}
