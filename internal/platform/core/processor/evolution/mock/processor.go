// Code generated by MockGen. DO NOT EDIT.
// Source: internal/platform/core/processor/evolution/processor.go
//
// Generated by this command:
//
//	mockgen -source=internal/platform/core/processor/evolution/processor.go -destination=internal/platform/core/processor/evolution/mock/processor.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// GetInitStartingBlock mocks base method.
func (m *MockProcessor) GetInitStartingBlock(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitStartingBlock", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitStartingBlock indicates an expected call of GetInitStartingBlock.
func (mr *MockProcessorMockRecorder) GetInitStartingBlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitStartingBlock", reflect.TypeOf((*MockProcessor)(nil).GetInitStartingBlock), ctx)
}

// GetLastBlock mocks base method.
func (m *MockProcessor) GetLastBlock(ctx context.Context, startingBlock uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBlock", ctx, startingBlock)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBlock indicates an expected call of GetLastBlock.
func (mr *MockProcessorMockRecorder) GetLastBlock(ctx, startingBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBlock", reflect.TypeOf((*MockProcessor)(nil).GetLastBlock), ctx, startingBlock)
}

// ProcessEvoBlockRange mocks base method.
func (m *MockProcessor) ProcessEvoBlockRange(ctx context.Context, startingBlock, lastBlock uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEvoBlockRange", ctx, startingBlock, lastBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessEvoBlockRange indicates an expected call of ProcessEvoBlockRange.
func (mr *MockProcessorMockRecorder) ProcessEvoBlockRange(ctx, startingBlock, lastBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEvoBlockRange", reflect.TypeOf((*MockProcessor)(nil).ProcessEvoBlockRange), ctx, startingBlock, lastBlock)
}

// VerifyChainConsistency mocks base method.
func (m *MockProcessor) VerifyChainConsistency(ctx context.Context, startingBlock uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyChainConsistency", ctx, startingBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyChainConsistency indicates an expected call of VerifyChainConsistency.
func (mr *MockProcessorMockRecorder) VerifyChainConsistency(ctx, startingBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyChainConsistency", reflect.TypeOf((*MockProcessor)(nil).VerifyChainConsistency), ctx, startingBlock)
}
