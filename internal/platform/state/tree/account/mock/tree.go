// Code generated by MockGen. DO NOT EDIT.
// Source: internal/platform/state/tree/account/tree.go
//
// Generated by this command:
//
//	mockgen -source=internal/platform/state/tree/account/tree.go -destination=internal/platform/state/tree/account/mock/tree.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	account "github.com/freeverseio/laos-universal-node/internal/platform/state/tree/account"
	gomock "go.uber.org/mock/gomock"
)

// MockTree is a mock of Tree interface.
type MockTree struct {
	ctrl     *gomock.Controller
	recorder *MockTreeMockRecorder
}

// MockTreeMockRecorder is the mock recorder for MockTree.
type MockTreeMockRecorder struct {
	mock *MockTree
}

// NewMockTree creates a new mock instance.
func NewMockTree(ctrl *gomock.Controller) *MockTree {
	mock := &MockTree{ctrl: ctrl}
	mock.recorder = &MockTreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTree) EXPECT() *MockTreeMockRecorder {
	return m.recorder
}

// Checkout mocks base method.
func (m *MockTree) Checkout(blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockTreeMockRecorder) Checkout(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockTree)(nil).Checkout), blockNumber)
}

// GetLastTaggedBlock mocks base method.
func (m *MockTree) GetLastTaggedBlock() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastTaggedBlock")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastTaggedBlock indicates an expected call of GetLastTaggedBlock.
func (mr *MockTreeMockRecorder) GetLastTaggedBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastTaggedBlock", reflect.TypeOf((*MockTree)(nil).GetLastTaggedBlock))
}

// MerkleTreeRoots mocks base method.
func (m *MockTree) MerkleTreeRoots(merkleTreeID *big.Int) (*account.MerkleTreeRoots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MerkleTreeRoots", merkleTreeID)
	ret0, _ := ret[0].(*account.MerkleTreeRoots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MerkleTreeRoots indicates an expected call of MerkleTreeRoots.
func (mr *MockTreeMockRecorder) MerkleTreeRoots(merkleTreeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MerkleTreeRoots", reflect.TypeOf((*MockTree)(nil).MerkleTreeRoots), merkleTreeID)
}

// Root mocks base method.
func (m *MockTree) Root() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// Root indicates an expected call of Root.
func (mr *MockTreeMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockTree)(nil).Root))
}

// SetMerkleTreeRoots mocks base method.
func (m *MockTree) SetMerkleTreeRoots(roots *account.MerkleTreeRoots, merkleTreeID *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMerkleTreeRoots", roots, merkleTreeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMerkleTreeRoots indicates an expected call of SetMerkleTreeRoots.
func (mr *MockTreeMockRecorder) SetMerkleTreeRoots(roots, merkleTreeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMerkleTreeRoots", reflect.TypeOf((*MockTree)(nil).SetMerkleTreeRoots), roots, merkleTreeID)
}

// TagRoot mocks base method.
func (m *MockTree) TagRoot(blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagRoot", blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagRoot indicates an expected call of TagRoot.
func (mr *MockTreeMockRecorder) TagRoot(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagRoot", reflect.TypeOf((*MockTree)(nil).TagRoot), blockNumber)
}
