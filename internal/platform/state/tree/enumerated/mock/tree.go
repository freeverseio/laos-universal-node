// Code generated by MockGen. DO NOT EDIT.
// Source: internal/platform/state/tree/enumerated/tree.go
//
// Generated by this command:
//
//	mockgen -source=internal/platform/state/tree/enumerated/tree.go -destination=internal/platform/state/tree/enumerated/mock/tree.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	model "github.com/freeverseio/laos-universal-node/internal/platform/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTree is a mock of Tree interface.
type MockTree struct {
	ctrl     *gomock.Controller
	recorder *MockTreeMockRecorder
}

// MockTreeMockRecorder is the mock recorder for MockTree.
type MockTreeMockRecorder struct {
	mock *MockTree
}

// NewMockTree creates a new mock instance.
func NewMockTree(ctrl *gomock.Controller) *MockTree {
	mock := &MockTree{ctrl: ctrl}
	mock.recorder = &MockTreeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTree) EXPECT() *MockTreeMockRecorder {
	return m.recorder
}

// BalanceOfOwner mocks base method.
func (m *MockTree) BalanceOfOwner(owner common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceOfOwner", owner)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceOfOwner indicates an expected call of BalanceOfOwner.
func (mr *MockTreeMockRecorder) BalanceOfOwner(owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceOfOwner", reflect.TypeOf((*MockTree)(nil).BalanceOfOwner), owner)
}

// Checkout mocks base method.
func (m *MockTree) Checkout(blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockTreeMockRecorder) Checkout(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockTree)(nil).Checkout), blockNumber)
}

// GetLastTaggedBlock mocks base method.
func (m *MockTree) GetLastTaggedBlock() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastTaggedBlock")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastTaggedBlock indicates an expected call of GetLastTaggedBlock.
func (mr *MockTreeMockRecorder) GetLastTaggedBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastTaggedBlock", reflect.TypeOf((*MockTree)(nil).GetLastTaggedBlock))
}

// Mint mocks base method.
func (m *MockTree) Mint(tokenId *big.Int, owner common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mint", tokenId, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mint indicates an expected call of Mint.
func (mr *MockTreeMockRecorder) Mint(tokenId, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mint", reflect.TypeOf((*MockTree)(nil).Mint), tokenId, owner)
}

// Root mocks base method.
func (m *MockTree) Root() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// Root indicates an expected call of Root.
func (mr *MockTreeMockRecorder) Root() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockTree)(nil).Root))
}

// SetBalanceToOwner mocks base method.
func (m *MockTree) SetBalanceToOwner(owner common.Address, balance uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBalanceToOwner", owner, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBalanceToOwner indicates an expected call of SetBalanceToOwner.
func (mr *MockTreeMockRecorder) SetBalanceToOwner(owner, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBalanceToOwner", reflect.TypeOf((*MockTree)(nil).SetBalanceToOwner), owner, balance)
}

// SetTokenToOwnerToIndex mocks base method.
func (m *MockTree) SetTokenToOwnerToIndex(owner common.Address, idx uint64, token *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTokenToOwnerToIndex", owner, idx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTokenToOwnerToIndex indicates an expected call of SetTokenToOwnerToIndex.
func (mr *MockTreeMockRecorder) SetTokenToOwnerToIndex(owner, idx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTokenToOwnerToIndex", reflect.TypeOf((*MockTree)(nil).SetTokenToOwnerToIndex), owner, idx, token)
}

// TagRoot mocks base method.
func (m *MockTree) TagRoot(blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagRoot", blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagRoot indicates an expected call of TagRoot.
func (mr *MockTreeMockRecorder) TagRoot(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagRoot", reflect.TypeOf((*MockTree)(nil).TagRoot), blockNumber)
}

// TokenOfOwnerByIndex mocks base method.
func (m *MockTree) TokenOfOwnerByIndex(owner common.Address, idx uint64) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenOfOwnerByIndex", owner, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenOfOwnerByIndex indicates an expected call of TokenOfOwnerByIndex.
func (mr *MockTreeMockRecorder) TokenOfOwnerByIndex(owner, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenOfOwnerByIndex", reflect.TypeOf((*MockTree)(nil).TokenOfOwnerByIndex), owner, idx)
}

// Transfer mocks base method.
func (m *MockTree) Transfer(minted bool, eventTransfer *model.ERC721Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", minted, eventTransfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockTreeMockRecorder) Transfer(minted, eventTransfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockTree)(nil).Transfer), minted, eventTransfer)
}
