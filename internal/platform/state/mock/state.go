// Code generated by MockGen. DO NOT EDIT.
// Source: internal/platform/state/state.go
//
// Generated by this command:
//
//	mockgen -source=internal/platform/state/state.go -destination=internal/platform/state/mock/state.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	big "math/big"
	reflect "reflect"

	common "github.com/ethereum/go-ethereum/common"
	model "github.com/freeverseio/laos-universal-node/internal/platform/model"
	state "github.com/freeverseio/laos-universal-node/internal/platform/state"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// NewTransaction mocks base method.
func (m *MockService) NewTransaction() (state.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction")
	ret0, _ := ret[0].(state.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockServiceMockRecorder) NewTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockService)(nil).NewTransaction))
}

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// BalanceOf mocks base method.
func (m *MockTx) BalanceOf(contract, owner common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceOf", contract, owner)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceOf indicates an expected call of BalanceOf.
func (mr *MockTxMockRecorder) BalanceOf(contract, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceOf", reflect.TypeOf((*MockTx)(nil).BalanceOf), contract, owner)
}

// Checkout mocks base method.
func (m *MockTx) Checkout(blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockTxMockRecorder) Checkout(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockTx)(nil).Checkout), blockNumber)
}

// Commit mocks base method.
func (m *MockTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
}

// DeleteOldStoredBlockNumbers mocks base method.
func (m *MockTx) DeleteOldStoredBlockNumbers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldStoredBlockNumbers")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldStoredBlockNumbers indicates an expected call of DeleteOldStoredBlockNumbers.
func (mr *MockTxMockRecorder) DeleteOldStoredBlockNumbers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldStoredBlockNumbers", reflect.TypeOf((*MockTx)(nil).DeleteOldStoredBlockNumbers))
}

// DeleteOrphanBlockData mocks base method.
func (m *MockTx) DeleteOrphanBlockData(blockNumberRef uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrphanBlockData", blockNumberRef)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrphanBlockData indicates an expected call of DeleteOrphanBlockData.
func (mr *MockTxMockRecorder) DeleteOrphanBlockData(blockNumberRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrphanBlockData", reflect.TypeOf((*MockTx)(nil).DeleteOrphanBlockData), blockNumberRef)
}

// DeleteOrphanRootTags mocks base method.
func (m *MockTx) DeleteOrphanRootTags(formBlock, toBlock int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrphanRootTags", formBlock, toBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrphanRootTags indicates an expected call of DeleteOrphanRootTags.
func (mr *MockTxMockRecorder) DeleteOrphanRootTags(formBlock, toBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrphanRootTags", reflect.TypeOf((*MockTx)(nil).DeleteOrphanRootTags), formBlock, toBlock)
}

// DeleteRootTag mocks base method.
func (m *MockTx) DeleteRootTag(blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRootTag", blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRootTag indicates an expected call of DeleteRootTag.
func (mr *MockTxMockRecorder) DeleteRootTag(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRootTag", reflect.TypeOf((*MockTx)(nil).DeleteRootTag), blockNumber)
}

// Discard mocks base method.
func (m *MockTx) Discard() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Discard")
}

// Discard indicates an expected call of Discard.
func (mr *MockTxMockRecorder) Discard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discard", reflect.TypeOf((*MockTx)(nil).Discard))
}

// Get mocks base method.
func (m *MockTx) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTxMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTx)(nil).Get), key)
}

// GetAllERC721UniversalContracts mocks base method.
func (m *MockTx) GetAllERC721UniversalContracts() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllERC721UniversalContracts")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllERC721UniversalContracts indicates an expected call of GetAllERC721UniversalContracts.
func (mr *MockTxMockRecorder) GetAllERC721UniversalContracts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllERC721UniversalContracts", reflect.TypeOf((*MockTx)(nil).GetAllERC721UniversalContracts))
}

// GetAllStoredBlockNumbers mocks base method.
func (m *MockTx) GetAllStoredBlockNumbers() ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStoredBlockNumbers")
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStoredBlockNumbers indicates an expected call of GetAllStoredBlockNumbers.
func (mr *MockTxMockRecorder) GetAllStoredBlockNumbers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStoredBlockNumbers", reflect.TypeOf((*MockTx)(nil).GetAllStoredBlockNumbers))
}

// GetCollectionAddress mocks base method.
func (m *MockTx) GetCollectionAddress(contract string) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionAddress", contract)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionAddress indicates an expected call of GetCollectionAddress.
func (mr *MockTxMockRecorder) GetCollectionAddress(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionAddress", reflect.TypeOf((*MockTx)(nil).GetCollectionAddress), contract)
}

// GetExistingERC721UniversalContracts mocks base method.
func (m *MockTx) GetExistingERC721UniversalContracts(contracts []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExistingERC721UniversalContracts", contracts)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExistingERC721UniversalContracts indicates an expected call of GetExistingERC721UniversalContracts.
func (mr *MockTxMockRecorder) GetExistingERC721UniversalContracts(contracts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExistingERC721UniversalContracts", reflect.TypeOf((*MockTx)(nil).GetExistingERC721UniversalContracts), contracts)
}

// GetLastEvoBlock mocks base method.
func (m *MockTx) GetLastEvoBlock() (model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEvoBlock")
	ret0, _ := ret[0].(model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastEvoBlock indicates an expected call of GetLastEvoBlock.
func (mr *MockTxMockRecorder) GetLastEvoBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEvoBlock", reflect.TypeOf((*MockTx)(nil).GetLastEvoBlock))
}

// GetLastOwnershipBlock mocks base method.
func (m *MockTx) GetLastOwnershipBlock() (model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastOwnershipBlock")
	ret0, _ := ret[0].(model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastOwnershipBlock indicates an expected call of GetLastOwnershipBlock.
func (mr *MockTxMockRecorder) GetLastOwnershipBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastOwnershipBlock", reflect.TypeOf((*MockTx)(nil).GetLastOwnershipBlock))
}

// GetLastProcessedEvoBlockForOwnershipContract mocks base method.
func (m *MockTx) GetLastProcessedEvoBlockForOwnershipContract(contract common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastProcessedEvoBlockForOwnershipContract", contract)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastProcessedEvoBlockForOwnershipContract indicates an expected call of GetLastProcessedEvoBlockForOwnershipContract.
func (mr *MockTxMockRecorder) GetLastProcessedEvoBlockForOwnershipContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastProcessedEvoBlockForOwnershipContract", reflect.TypeOf((*MockTx)(nil).GetLastProcessedEvoBlockForOwnershipContract), contract)
}

// GetLastTaggedBlock mocks base method.
func (m *MockTx) GetLastTaggedBlock() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastTaggedBlock")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastTaggedBlock indicates an expected call of GetLastTaggedBlock.
func (mr *MockTxMockRecorder) GetLastTaggedBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastTaggedBlock", reflect.TypeOf((*MockTx)(nil).GetLastTaggedBlock))
}

// GetMintedWithExternalURIEvents mocks base method.
func (m *MockTx) GetMintedWithExternalURIEvents(contract string, blockNumber uint64) ([]model.MintedWithExternalURI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMintedWithExternalURIEvents", contract, blockNumber)
	ret0, _ := ret[0].([]model.MintedWithExternalURI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMintedWithExternalURIEvents indicates an expected call of GetMintedWithExternalURIEvents.
func (mr *MockTxMockRecorder) GetMintedWithExternalURIEvents(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMintedWithExternalURIEvents", reflect.TypeOf((*MockTx)(nil).GetMintedWithExternalURIEvents), contract, blockNumber)
}

// GetNextEvoEventBlock mocks base method.
func (m *MockTx) GetNextEvoEventBlock(contract string, blockNumber uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextEvoEventBlock", contract, blockNumber)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextEvoEventBlock indicates an expected call of GetNextEvoEventBlock.
func (mr *MockTxMockRecorder) GetNextEvoEventBlock(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextEvoEventBlock", reflect.TypeOf((*MockTx)(nil).GetNextEvoEventBlock), contract, blockNumber)
}

// GetOwnershipBlock mocks base method.
func (m *MockTx) GetOwnershipBlock(blockNumber uint64) (model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnershipBlock", blockNumber)
	ret0, _ := ret[0].(model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnershipBlock indicates an expected call of GetOwnershipBlock.
func (mr *MockTxMockRecorder) GetOwnershipBlock(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnershipBlock", reflect.TypeOf((*MockTx)(nil).GetOwnershipBlock), blockNumber)
}

// HasERC721UniversalContract mocks base method.
func (m *MockTx) HasERC721UniversalContract(contract string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasERC721UniversalContract", contract)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasERC721UniversalContract indicates an expected call of HasERC721UniversalContract.
func (mr *MockTxMockRecorder) HasERC721UniversalContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasERC721UniversalContract", reflect.TypeOf((*MockTx)(nil).HasERC721UniversalContract), contract)
}

// LoadContractTrees mocks base method.
func (m *MockTx) LoadContractTrees(contractAddress common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadContractTrees", contractAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadContractTrees indicates an expected call of LoadContractTrees.
func (mr *MockTxMockRecorder) LoadContractTrees(contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadContractTrees", reflect.TypeOf((*MockTx)(nil).LoadContractTrees), contractAddress)
}

// Mint mocks base method.
func (m *MockTx) Mint(contract common.Address, mintEvent *model.MintedWithExternalURI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mint", contract, mintEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mint indicates an expected call of Mint.
func (mr *MockTxMockRecorder) Mint(contract, mintEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mint", reflect.TypeOf((*MockTx)(nil).Mint), contract, mintEvent)
}

// OwnerOf mocks base method.
func (m *MockTx) OwnerOf(contract common.Address, tokenId *big.Int) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerOf", contract, tokenId)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnerOf indicates an expected call of OwnerOf.
func (mr *MockTxMockRecorder) OwnerOf(contract, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerOf", reflect.TypeOf((*MockTx)(nil).OwnerOf), contract, tokenId)
}

// SetLastEvoBlock mocks base method.
func (m *MockTx) SetLastEvoBlock(block model.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastEvoBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastEvoBlock indicates an expected call of SetLastEvoBlock.
func (mr *MockTxMockRecorder) SetLastEvoBlock(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastEvoBlock", reflect.TypeOf((*MockTx)(nil).SetLastEvoBlock), block)
}

// SetLastOwnershipBlock mocks base method.
func (m *MockTx) SetLastOwnershipBlock(block model.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastOwnershipBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastOwnershipBlock indicates an expected call of SetLastOwnershipBlock.
func (mr *MockTxMockRecorder) SetLastOwnershipBlock(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastOwnershipBlock", reflect.TypeOf((*MockTx)(nil).SetLastOwnershipBlock), block)
}

// SetLastProcessedEvoBlockForOwnershipContract mocks base method.
func (m *MockTx) SetLastProcessedEvoBlockForOwnershipContract(contract common.Address, blockNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastProcessedEvoBlockForOwnershipContract", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastProcessedEvoBlockForOwnershipContract indicates an expected call of SetLastProcessedEvoBlockForOwnershipContract.
func (mr *MockTxMockRecorder) SetLastProcessedEvoBlockForOwnershipContract(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastProcessedEvoBlockForOwnershipContract", reflect.TypeOf((*MockTx)(nil).SetLastProcessedEvoBlockForOwnershipContract), contract, blockNumber)
}

// SetNextEvoEventBlock mocks base method.
func (m *MockTx) SetNextEvoEventBlock(contract string, blockNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNextEvoEventBlock", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNextEvoEventBlock indicates an expected call of SetNextEvoEventBlock.
func (mr *MockTxMockRecorder) SetNextEvoEventBlock(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNextEvoEventBlock", reflect.TypeOf((*MockTx)(nil).SetNextEvoEventBlock), contract, blockNumber)
}

// SetOwnershipBlock mocks base method.
func (m *MockTx) SetOwnershipBlock(blockNumber uint64, block model.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnershipBlock", blockNumber, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnershipBlock indicates an expected call of SetOwnershipBlock.
func (mr *MockTxMockRecorder) SetOwnershipBlock(blockNumber, block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnershipBlock", reflect.TypeOf((*MockTx)(nil).SetOwnershipBlock), blockNumber, block)
}

// StoreERC721UniversalContracts mocks base method.
func (m *MockTx) StoreERC721UniversalContracts(universalContracts []model.ERC721UniversalContract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreERC721UniversalContracts", universalContracts)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreERC721UniversalContracts indicates an expected call of StoreERC721UniversalContracts.
func (mr *MockTxMockRecorder) StoreERC721UniversalContracts(universalContracts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreERC721UniversalContracts", reflect.TypeOf((*MockTx)(nil).StoreERC721UniversalContracts), universalContracts)
}

// StoreMintedWithExternalURIEvents mocks base method.
func (m *MockTx) StoreMintedWithExternalURIEvents(contract string, event model.MintedWithExternalURI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMintedWithExternalURIEvents", contract, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMintedWithExternalURIEvents indicates an expected call of StoreMintedWithExternalURIEvents.
func (mr *MockTxMockRecorder) StoreMintedWithExternalURIEvents(contract, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMintedWithExternalURIEvents", reflect.TypeOf((*MockTx)(nil).StoreMintedWithExternalURIEvents), contract, event)
}

// TagRoot mocks base method.
func (m *MockTx) TagRoot(blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagRoot", blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagRoot indicates an expected call of TagRoot.
func (mr *MockTxMockRecorder) TagRoot(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagRoot", reflect.TypeOf((*MockTx)(nil).TagRoot), blockNumber)
}

// TokenByIndex mocks base method.
func (m *MockTx) TokenByIndex(contract common.Address, idx int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenByIndex", contract, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenByIndex indicates an expected call of TokenByIndex.
func (mr *MockTxMockRecorder) TokenByIndex(contract, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenByIndex", reflect.TypeOf((*MockTx)(nil).TokenByIndex), contract, idx)
}

// TokenOfOwnerByIndex mocks base method.
func (m *MockTx) TokenOfOwnerByIndex(contract, owner common.Address, idx int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenOfOwnerByIndex", contract, owner, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenOfOwnerByIndex indicates an expected call of TokenOfOwnerByIndex.
func (mr *MockTxMockRecorder) TokenOfOwnerByIndex(contract, owner, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenOfOwnerByIndex", reflect.TypeOf((*MockTx)(nil).TokenOfOwnerByIndex), contract, owner, idx)
}

// TokenURI mocks base method.
func (m *MockTx) TokenURI(contract common.Address, tokenId *big.Int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenURI", contract, tokenId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenURI indicates an expected call of TokenURI.
func (mr *MockTxMockRecorder) TokenURI(contract, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenURI", reflect.TypeOf((*MockTx)(nil).TokenURI), contract, tokenId)
}

// TotalSupply mocks base method.
func (m *MockTx) TotalSupply(contract common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalSupply", contract)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSupply indicates an expected call of TotalSupply.
func (mr *MockTxMockRecorder) TotalSupply(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSupply", reflect.TypeOf((*MockTx)(nil).TotalSupply), contract)
}

// Transfer mocks base method.
func (m *MockTx) Transfer(contract common.Address, eventTransfer *model.ERC721Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", contract, eventTransfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockTxMockRecorder) Transfer(contract, eventTransfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockTx)(nil).Transfer), contract, eventTransfer)
}

// UpdateContractState mocks base method.
func (m *MockTx) UpdateContractState(contract common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContractState", contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContractState indicates an expected call of UpdateContractState.
func (mr *MockTxMockRecorder) UpdateContractState(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContractState", reflect.TypeOf((*MockTx)(nil).UpdateContractState), contract)
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// BalanceOf mocks base method.
func (m *MockState) BalanceOf(contract, owner common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceOf", contract, owner)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceOf indicates an expected call of BalanceOf.
func (mr *MockStateMockRecorder) BalanceOf(contract, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceOf", reflect.TypeOf((*MockState)(nil).BalanceOf), contract, owner)
}

// Checkout mocks base method.
func (m *MockState) Checkout(blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockStateMockRecorder) Checkout(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockState)(nil).Checkout), blockNumber)
}

// DeleteOrphanRootTags mocks base method.
func (m *MockState) DeleteOrphanRootTags(formBlock, toBlock int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrphanRootTags", formBlock, toBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrphanRootTags indicates an expected call of DeleteOrphanRootTags.
func (mr *MockStateMockRecorder) DeleteOrphanRootTags(formBlock, toBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrphanRootTags", reflect.TypeOf((*MockState)(nil).DeleteOrphanRootTags), formBlock, toBlock)
}

// DeleteRootTag mocks base method.
func (m *MockState) DeleteRootTag(blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRootTag", blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRootTag indicates an expected call of DeleteRootTag.
func (mr *MockStateMockRecorder) DeleteRootTag(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRootTag", reflect.TypeOf((*MockState)(nil).DeleteRootTag), blockNumber)
}

// Get mocks base method.
func (m *MockState) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStateMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockState)(nil).Get), key)
}

// GetLastProcessedEvoBlockForOwnershipContract mocks base method.
func (m *MockState) GetLastProcessedEvoBlockForOwnershipContract(contract common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastProcessedEvoBlockForOwnershipContract", contract)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastProcessedEvoBlockForOwnershipContract indicates an expected call of GetLastProcessedEvoBlockForOwnershipContract.
func (mr *MockStateMockRecorder) GetLastProcessedEvoBlockForOwnershipContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastProcessedEvoBlockForOwnershipContract", reflect.TypeOf((*MockState)(nil).GetLastProcessedEvoBlockForOwnershipContract), contract)
}

// GetLastTaggedBlock mocks base method.
func (m *MockState) GetLastTaggedBlock() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastTaggedBlock")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastTaggedBlock indicates an expected call of GetLastTaggedBlock.
func (mr *MockStateMockRecorder) GetLastTaggedBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastTaggedBlock", reflect.TypeOf((*MockState)(nil).GetLastTaggedBlock))
}

// LoadContractTrees mocks base method.
func (m *MockState) LoadContractTrees(contractAddress common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadContractTrees", contractAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadContractTrees indicates an expected call of LoadContractTrees.
func (mr *MockStateMockRecorder) LoadContractTrees(contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadContractTrees", reflect.TypeOf((*MockState)(nil).LoadContractTrees), contractAddress)
}

// Mint mocks base method.
func (m *MockState) Mint(contract common.Address, mintEvent *model.MintedWithExternalURI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mint", contract, mintEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mint indicates an expected call of Mint.
func (mr *MockStateMockRecorder) Mint(contract, mintEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mint", reflect.TypeOf((*MockState)(nil).Mint), contract, mintEvent)
}

// OwnerOf mocks base method.
func (m *MockState) OwnerOf(contract common.Address, tokenId *big.Int) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OwnerOf", contract, tokenId)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OwnerOf indicates an expected call of OwnerOf.
func (mr *MockStateMockRecorder) OwnerOf(contract, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OwnerOf", reflect.TypeOf((*MockState)(nil).OwnerOf), contract, tokenId)
}

// SetLastProcessedEvoBlockForOwnershipContract mocks base method.
func (m *MockState) SetLastProcessedEvoBlockForOwnershipContract(contract common.Address, blockNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastProcessedEvoBlockForOwnershipContract", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastProcessedEvoBlockForOwnershipContract indicates an expected call of SetLastProcessedEvoBlockForOwnershipContract.
func (mr *MockStateMockRecorder) SetLastProcessedEvoBlockForOwnershipContract(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastProcessedEvoBlockForOwnershipContract", reflect.TypeOf((*MockState)(nil).SetLastProcessedEvoBlockForOwnershipContract), contract, blockNumber)
}

// TagRoot mocks base method.
func (m *MockState) TagRoot(blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagRoot", blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// TagRoot indicates an expected call of TagRoot.
func (mr *MockStateMockRecorder) TagRoot(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagRoot", reflect.TypeOf((*MockState)(nil).TagRoot), blockNumber)
}

// TokenByIndex mocks base method.
func (m *MockState) TokenByIndex(contract common.Address, idx int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenByIndex", contract, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenByIndex indicates an expected call of TokenByIndex.
func (mr *MockStateMockRecorder) TokenByIndex(contract, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenByIndex", reflect.TypeOf((*MockState)(nil).TokenByIndex), contract, idx)
}

// TokenOfOwnerByIndex mocks base method.
func (m *MockState) TokenOfOwnerByIndex(contract, owner common.Address, idx int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenOfOwnerByIndex", contract, owner, idx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenOfOwnerByIndex indicates an expected call of TokenOfOwnerByIndex.
func (mr *MockStateMockRecorder) TokenOfOwnerByIndex(contract, owner, idx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenOfOwnerByIndex", reflect.TypeOf((*MockState)(nil).TokenOfOwnerByIndex), contract, owner, idx)
}

// TokenURI mocks base method.
func (m *MockState) TokenURI(contract common.Address, tokenId *big.Int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenURI", contract, tokenId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenURI indicates an expected call of TokenURI.
func (mr *MockStateMockRecorder) TokenURI(contract, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenURI", reflect.TypeOf((*MockState)(nil).TokenURI), contract, tokenId)
}

// TotalSupply mocks base method.
func (m *MockState) TotalSupply(contract common.Address) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalSupply", contract)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSupply indicates an expected call of TotalSupply.
func (mr *MockStateMockRecorder) TotalSupply(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSupply", reflect.TypeOf((*MockState)(nil).TotalSupply), contract)
}

// Transfer mocks base method.
func (m *MockState) Transfer(contract common.Address, eventTransfer *model.ERC721Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", contract, eventTransfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockStateMockRecorder) Transfer(contract, eventTransfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockState)(nil).Transfer), contract, eventTransfer)
}

// UpdateContractState mocks base method.
func (m *MockState) UpdateContractState(contract common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContractState", contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContractState indicates an expected call of UpdateContractState.
func (mr *MockStateMockRecorder) UpdateContractState(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContractState", reflect.TypeOf((*MockState)(nil).UpdateContractState), contract)
}

// MockOwnershipContractState is a mock of OwnershipContractState interface.
type MockOwnershipContractState struct {
	ctrl     *gomock.Controller
	recorder *MockOwnershipContractStateMockRecorder
}

// MockOwnershipContractStateMockRecorder is the mock recorder for MockOwnershipContractState.
type MockOwnershipContractStateMockRecorder struct {
	mock *MockOwnershipContractState
}

// NewMockOwnershipContractState creates a new mock instance.
func NewMockOwnershipContractState(ctrl *gomock.Controller) *MockOwnershipContractState {
	mock := &MockOwnershipContractState{ctrl: ctrl}
	mock.recorder = &MockOwnershipContractStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnershipContractState) EXPECT() *MockOwnershipContractStateMockRecorder {
	return m.recorder
}

// GetAllERC721UniversalContracts mocks base method.
func (m *MockOwnershipContractState) GetAllERC721UniversalContracts() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllERC721UniversalContracts")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllERC721UniversalContracts indicates an expected call of GetAllERC721UniversalContracts.
func (mr *MockOwnershipContractStateMockRecorder) GetAllERC721UniversalContracts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllERC721UniversalContracts", reflect.TypeOf((*MockOwnershipContractState)(nil).GetAllERC721UniversalContracts))
}

// GetCollectionAddress mocks base method.
func (m *MockOwnershipContractState) GetCollectionAddress(contract string) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionAddress", contract)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionAddress indicates an expected call of GetCollectionAddress.
func (mr *MockOwnershipContractStateMockRecorder) GetCollectionAddress(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionAddress", reflect.TypeOf((*MockOwnershipContractState)(nil).GetCollectionAddress), contract)
}

// GetExistingERC721UniversalContracts mocks base method.
func (m *MockOwnershipContractState) GetExistingERC721UniversalContracts(contracts []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExistingERC721UniversalContracts", contracts)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExistingERC721UniversalContracts indicates an expected call of GetExistingERC721UniversalContracts.
func (mr *MockOwnershipContractStateMockRecorder) GetExistingERC721UniversalContracts(contracts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExistingERC721UniversalContracts", reflect.TypeOf((*MockOwnershipContractState)(nil).GetExistingERC721UniversalContracts), contracts)
}

// HasERC721UniversalContract mocks base method.
func (m *MockOwnershipContractState) HasERC721UniversalContract(contract string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasERC721UniversalContract", contract)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasERC721UniversalContract indicates an expected call of HasERC721UniversalContract.
func (mr *MockOwnershipContractStateMockRecorder) HasERC721UniversalContract(contract any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasERC721UniversalContract", reflect.TypeOf((*MockOwnershipContractState)(nil).HasERC721UniversalContract), contract)
}

// StoreERC721UniversalContracts mocks base method.
func (m *MockOwnershipContractState) StoreERC721UniversalContracts(universalContracts []model.ERC721UniversalContract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreERC721UniversalContracts", universalContracts)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreERC721UniversalContracts indicates an expected call of StoreERC721UniversalContracts.
func (mr *MockOwnershipContractStateMockRecorder) StoreERC721UniversalContracts(universalContracts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreERC721UniversalContracts", reflect.TypeOf((*MockOwnershipContractState)(nil).StoreERC721UniversalContracts), universalContracts)
}

// MockEvolutionContractState is a mock of EvolutionContractState interface.
type MockEvolutionContractState struct {
	ctrl     *gomock.Controller
	recorder *MockEvolutionContractStateMockRecorder
}

// MockEvolutionContractStateMockRecorder is the mock recorder for MockEvolutionContractState.
type MockEvolutionContractStateMockRecorder struct {
	mock *MockEvolutionContractState
}

// NewMockEvolutionContractState creates a new mock instance.
func NewMockEvolutionContractState(ctrl *gomock.Controller) *MockEvolutionContractState {
	mock := &MockEvolutionContractState{ctrl: ctrl}
	mock.recorder = &MockEvolutionContractStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvolutionContractState) EXPECT() *MockEvolutionContractStateMockRecorder {
	return m.recorder
}

// GetMintedWithExternalURIEvents mocks base method.
func (m *MockEvolutionContractState) GetMintedWithExternalURIEvents(contract string, blockNumber uint64) ([]model.MintedWithExternalURI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMintedWithExternalURIEvents", contract, blockNumber)
	ret0, _ := ret[0].([]model.MintedWithExternalURI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMintedWithExternalURIEvents indicates an expected call of GetMintedWithExternalURIEvents.
func (mr *MockEvolutionContractStateMockRecorder) GetMintedWithExternalURIEvents(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMintedWithExternalURIEvents", reflect.TypeOf((*MockEvolutionContractState)(nil).GetMintedWithExternalURIEvents), contract, blockNumber)
}

// StoreMintedWithExternalURIEvents mocks base method.
func (m *MockEvolutionContractState) StoreMintedWithExternalURIEvents(contract string, event model.MintedWithExternalURI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMintedWithExternalURIEvents", contract, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMintedWithExternalURIEvents indicates an expected call of StoreMintedWithExternalURIEvents.
func (mr *MockEvolutionContractStateMockRecorder) StoreMintedWithExternalURIEvents(contract, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMintedWithExternalURIEvents", reflect.TypeOf((*MockEvolutionContractState)(nil).StoreMintedWithExternalURIEvents), contract, event)
}

// MockOwnershipSyncState is a mock of OwnershipSyncState interface.
type MockOwnershipSyncState struct {
	ctrl     *gomock.Controller
	recorder *MockOwnershipSyncStateMockRecorder
}

// MockOwnershipSyncStateMockRecorder is the mock recorder for MockOwnershipSyncState.
type MockOwnershipSyncStateMockRecorder struct {
	mock *MockOwnershipSyncState
}

// NewMockOwnershipSyncState creates a new mock instance.
func NewMockOwnershipSyncState(ctrl *gomock.Controller) *MockOwnershipSyncState {
	mock := &MockOwnershipSyncState{ctrl: ctrl}
	mock.recorder = &MockOwnershipSyncStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnershipSyncState) EXPECT() *MockOwnershipSyncStateMockRecorder {
	return m.recorder
}

// DeleteOldStoredBlockNumbers mocks base method.
func (m *MockOwnershipSyncState) DeleteOldStoredBlockNumbers() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldStoredBlockNumbers")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldStoredBlockNumbers indicates an expected call of DeleteOldStoredBlockNumbers.
func (mr *MockOwnershipSyncStateMockRecorder) DeleteOldStoredBlockNumbers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldStoredBlockNumbers", reflect.TypeOf((*MockOwnershipSyncState)(nil).DeleteOldStoredBlockNumbers))
}

// DeleteOrphanBlockData mocks base method.
func (m *MockOwnershipSyncState) DeleteOrphanBlockData(blockNumberRef uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrphanBlockData", blockNumberRef)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrphanBlockData indicates an expected call of DeleteOrphanBlockData.
func (mr *MockOwnershipSyncStateMockRecorder) DeleteOrphanBlockData(blockNumberRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrphanBlockData", reflect.TypeOf((*MockOwnershipSyncState)(nil).DeleteOrphanBlockData), blockNumberRef)
}

// GetAllStoredBlockNumbers mocks base method.
func (m *MockOwnershipSyncState) GetAllStoredBlockNumbers() ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStoredBlockNumbers")
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStoredBlockNumbers indicates an expected call of GetAllStoredBlockNumbers.
func (mr *MockOwnershipSyncStateMockRecorder) GetAllStoredBlockNumbers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStoredBlockNumbers", reflect.TypeOf((*MockOwnershipSyncState)(nil).GetAllStoredBlockNumbers))
}

// GetLastOwnershipBlock mocks base method.
func (m *MockOwnershipSyncState) GetLastOwnershipBlock() (model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastOwnershipBlock")
	ret0, _ := ret[0].(model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastOwnershipBlock indicates an expected call of GetLastOwnershipBlock.
func (mr *MockOwnershipSyncStateMockRecorder) GetLastOwnershipBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastOwnershipBlock", reflect.TypeOf((*MockOwnershipSyncState)(nil).GetLastOwnershipBlock))
}

// GetOwnershipBlock mocks base method.
func (m *MockOwnershipSyncState) GetOwnershipBlock(blockNumber uint64) (model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnershipBlock", blockNumber)
	ret0, _ := ret[0].(model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnershipBlock indicates an expected call of GetOwnershipBlock.
func (mr *MockOwnershipSyncStateMockRecorder) GetOwnershipBlock(blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnershipBlock", reflect.TypeOf((*MockOwnershipSyncState)(nil).GetOwnershipBlock), blockNumber)
}

// SetLastOwnershipBlock mocks base method.
func (m *MockOwnershipSyncState) SetLastOwnershipBlock(block model.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastOwnershipBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastOwnershipBlock indicates an expected call of SetLastOwnershipBlock.
func (mr *MockOwnershipSyncStateMockRecorder) SetLastOwnershipBlock(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastOwnershipBlock", reflect.TypeOf((*MockOwnershipSyncState)(nil).SetLastOwnershipBlock), block)
}

// SetOwnershipBlock mocks base method.
func (m *MockOwnershipSyncState) SetOwnershipBlock(blockNumber uint64, block model.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOwnershipBlock", blockNumber, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOwnershipBlock indicates an expected call of SetOwnershipBlock.
func (mr *MockOwnershipSyncStateMockRecorder) SetOwnershipBlock(blockNumber, block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnershipBlock", reflect.TypeOf((*MockOwnershipSyncState)(nil).SetOwnershipBlock), blockNumber, block)
}

// MockEvolutionSyncState is a mock of EvolutionSyncState interface.
type MockEvolutionSyncState struct {
	ctrl     *gomock.Controller
	recorder *MockEvolutionSyncStateMockRecorder
}

// MockEvolutionSyncStateMockRecorder is the mock recorder for MockEvolutionSyncState.
type MockEvolutionSyncStateMockRecorder struct {
	mock *MockEvolutionSyncState
}

// NewMockEvolutionSyncState creates a new mock instance.
func NewMockEvolutionSyncState(ctrl *gomock.Controller) *MockEvolutionSyncState {
	mock := &MockEvolutionSyncState{ctrl: ctrl}
	mock.recorder = &MockEvolutionSyncStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvolutionSyncState) EXPECT() *MockEvolutionSyncStateMockRecorder {
	return m.recorder
}

// GetLastEvoBlock mocks base method.
func (m *MockEvolutionSyncState) GetLastEvoBlock() (model.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastEvoBlock")
	ret0, _ := ret[0].(model.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastEvoBlock indicates an expected call of GetLastEvoBlock.
func (mr *MockEvolutionSyncStateMockRecorder) GetLastEvoBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastEvoBlock", reflect.TypeOf((*MockEvolutionSyncState)(nil).GetLastEvoBlock))
}

// GetNextEvoEventBlock mocks base method.
func (m *MockEvolutionSyncState) GetNextEvoEventBlock(contract string, blockNumber uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextEvoEventBlock", contract, blockNumber)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextEvoEventBlock indicates an expected call of GetNextEvoEventBlock.
func (mr *MockEvolutionSyncStateMockRecorder) GetNextEvoEventBlock(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextEvoEventBlock", reflect.TypeOf((*MockEvolutionSyncState)(nil).GetNextEvoEventBlock), contract, blockNumber)
}

// SetLastEvoBlock mocks base method.
func (m *MockEvolutionSyncState) SetLastEvoBlock(block model.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastEvoBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastEvoBlock indicates an expected call of SetLastEvoBlock.
func (mr *MockEvolutionSyncStateMockRecorder) SetLastEvoBlock(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastEvoBlock", reflect.TypeOf((*MockEvolutionSyncState)(nil).SetLastEvoBlock), block)
}

// SetNextEvoEventBlock mocks base method.
func (m *MockEvolutionSyncState) SetNextEvoEventBlock(contract string, blockNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNextEvoEventBlock", contract, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNextEvoEventBlock indicates an expected call of SetNextEvoEventBlock.
func (mr *MockEvolutionSyncStateMockRecorder) SetNextEvoEventBlock(contract, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNextEvoEventBlock", reflect.TypeOf((*MockEvolutionSyncState)(nil).SetNextEvoEventBlock), contract, blockNumber)
}
