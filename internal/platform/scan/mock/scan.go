// Code generated by MockGen. DO NOT EDIT.
// Source: internal/platform/scan/scan.go
//
// Generated by this command:
//
//	mockgen -source=internal/platform/scan/scan.go -destination=internal/platform/scan/mock/scan.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	big "math/big"
	reflect "reflect"

	scan "github.com/freeverseio/laos-universal-node/internal/platform/scan"
	gomock "go.uber.org/mock/gomock"
)

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// ScanEvents mocks base method.
func (m *MockScanner) ScanEvents(ctx context.Context, fromBlock, toBlock *big.Int, contracts []string) ([]scan.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanEvents", ctx, fromBlock, toBlock, contracts)
	ret0, _ := ret[0].([]scan.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanEvents indicates an expected call of ScanEvents.
func (mr *MockScannerMockRecorder) ScanEvents(ctx, fromBlock, toBlock, contracts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanEvents", reflect.TypeOf((*MockScanner)(nil).ScanEvents), ctx, fromBlock, toBlock, contracts)
}

// ScanNewUniversalEvents mocks base method.
func (m *MockScanner) ScanNewUniversalEvents(ctx context.Context, fromBlock, toBlock *big.Int) ([]scan.EventNewERC721Universal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanNewUniversalEvents", ctx, fromBlock, toBlock)
	ret0, _ := ret[0].([]scan.EventNewERC721Universal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanNewUniversalEvents indicates an expected call of ScanNewUniversalEvents.
func (mr *MockScannerMockRecorder) ScanNewUniversalEvents(ctx, fromBlock, toBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanNewUniversalEvents", reflect.TypeOf((*MockScanner)(nil).ScanNewUniversalEvents), ctx, fromBlock, toBlock)
}
