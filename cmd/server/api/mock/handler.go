// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/server/api/handler.go
//
// Generated by this command:
//
//	mockgen -source=cmd/server/api/handler.go -destination=cmd/server/api/mock/handler.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	api "github.com/freeverseio/laos-universal-node/cmd/server/api"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClientInterface is a mock of HTTPClientInterface interface.
type MockHTTPClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientInterfaceMockRecorder
}

// MockHTTPClientInterfaceMockRecorder is the mock recorder for MockHTTPClientInterface.
type MockHTTPClientInterfaceMockRecorder struct {
	mock *MockHTTPClientInterface
}

// NewMockHTTPClientInterface creates a new mock instance.
func NewMockHTTPClientInterface(ctrl *gomock.Controller) *MockHTTPClientInterface {
	mock := &MockHTTPClientInterface{ctrl: ctrl}
	mock.recorder = &MockHTTPClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClientInterface) EXPECT() *MockHTTPClientInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClientInterface) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientInterfaceMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClientInterface)(nil).Do), req)
}

// MockRPCHandler is a mock of RPCHandler interface.
type MockRPCHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRPCHandlerMockRecorder
}

// MockRPCHandlerMockRecorder is the mock recorder for MockRPCHandler.
type MockRPCHandlerMockRecorder struct {
	mock *MockRPCHandler
}

// NewMockRPCHandler creates a new mock instance.
func NewMockRPCHandler(ctrl *gomock.Controller) *MockRPCHandler {
	mock := &MockRPCHandler{ctrl: ctrl}
	mock.recorder = &MockRPCHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCHandler) EXPECT() *MockRPCHandlerMockRecorder {
	return m.recorder
}

// PostRPCProxyHandler mocks base method.
func (m *MockRPCHandler) PostRPCProxyHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostRPCProxyHandler", w, r)
}

// PostRPCProxyHandler indicates an expected call of PostRPCProxyHandler.
func (mr *MockRPCHandlerMockRecorder) PostRPCProxyHandler(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRPCProxyHandler", reflect.TypeOf((*MockRPCHandler)(nil).PostRPCProxyHandler), w, r)
}

// SetJsonRPCRequest mocks base method.
func (m *MockRPCHandler) SetJsonRPCRequest(req api.JSONRPCRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetJsonRPCRequest", req)
}

// SetJsonRPCRequest indicates an expected call of SetJsonRPCRequest.
func (mr *MockRPCHandlerMockRecorder) SetJsonRPCRequest(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJsonRPCRequest", reflect.TypeOf((*MockRPCHandler)(nil).SetJsonRPCRequest), req)
}

// UniversalMintingRPCHandler mocks base method.
func (m *MockRPCHandler) UniversalMintingRPCHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UniversalMintingRPCHandler", w, r)
}

// UniversalMintingRPCHandler indicates an expected call of UniversalMintingRPCHandler.
func (mr *MockRPCHandlerMockRecorder) UniversalMintingRPCHandler(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniversalMintingRPCHandler", reflect.TypeOf((*MockRPCHandler)(nil).UniversalMintingRPCHandler), w, r)
}
