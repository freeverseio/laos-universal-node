// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/server/api/handler.go
//
// Generated by this command:
//
//	mockgen -source=cmd/server/api/handler.go -destination=cmd/server/api/mock/handler.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHttpClientInterface is a mock of HttpClientInterface interface.
type MockHttpClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientInterfaceMockRecorder
}

// MockHttpClientInterfaceMockRecorder is the mock recorder for MockHttpClientInterface.
type MockHttpClientInterfaceMockRecorder struct {
	mock *MockHttpClientInterface
}

// NewMockHttpClientInterface creates a new mock instance.
func NewMockHttpClientInterface(ctrl *gomock.Controller) *MockHttpClientInterface {
	mock := &MockHttpClientInterface{ctrl: ctrl}
	mock.recorder = &MockHttpClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClientInterface) EXPECT() *MockHttpClientInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpClientInterface) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpClientInterfaceMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpClientInterface)(nil).Do), req)
}

// MockApiHandlerInterface is a mock of ApiHandlerInterface interface.
type MockApiHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApiHandlerInterfaceMockRecorder
}

// MockApiHandlerInterfaceMockRecorder is the mock recorder for MockApiHandlerInterface.
type MockApiHandlerInterfaceMockRecorder struct {
	mock *MockApiHandlerInterface
}

// NewMockApiHandlerInterface creates a new mock instance.
func NewMockApiHandlerInterface(ctrl *gomock.Controller) *MockApiHandlerInterface {
	mock := &MockApiHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockApiHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiHandlerInterface) EXPECT() *MockApiHandlerInterfaceMockRecorder {
	return m.recorder
}

// PostRpcHandler mocks base method.
func (m *MockApiHandlerInterface) PostRpcHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostRpcHandler", w, r)
}

// PostRpcHandler indicates an expected call of PostRpcHandler.
func (mr *MockApiHandlerInterfaceMockRecorder) PostRpcHandler(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRpcHandler", reflect.TypeOf((*MockApiHandlerInterface)(nil).PostRpcHandler), w, r)
}
