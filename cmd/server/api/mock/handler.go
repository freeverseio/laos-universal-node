// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/server/api/handler.go
//
// Generated by this command:
//
//	mockgen -source=cmd/server/api/handler.go -destination=cmd/server/api/mock/handler.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	api "github.com/freeverseio/laos-universal-node/cmd/server/api"
	state "github.com/freeverseio/laos-universal-node/internal/platform/state"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClientInterface is a mock of HTTPClientInterface interface.
type MockHTTPClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientInterfaceMockRecorder
}

// MockHTTPClientInterfaceMockRecorder is the mock recorder for MockHTTPClientInterface.
type MockHTTPClientInterfaceMockRecorder struct {
	mock *MockHTTPClientInterface
}

// NewMockHTTPClientInterface creates a new mock instance.
func NewMockHTTPClientInterface(ctrl *gomock.Controller) *MockHTTPClientInterface {
	mock := &MockHTTPClientInterface{ctrl: ctrl}
	mock.recorder = &MockHTTPClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClientInterface) EXPECT() *MockHTTPClientInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClientInterface) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientInterfaceMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClientInterface)(nil).Do), req)
}

// MockRPCHandler is a mock of RPCHandler interface.
type MockRPCHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRPCHandlerMockRecorder
}

// MockRPCHandlerMockRecorder is the mock recorder for MockRPCHandler.
type MockRPCHandlerMockRecorder struct {
	mock *MockRPCHandler
}

// NewMockRPCHandler creates a new mock instance.
func NewMockRPCHandler(ctrl *gomock.Controller) *MockRPCHandler {
	mock := &MockRPCHandler{ctrl: ctrl}
	mock.recorder = &MockRPCHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCHandler) EXPECT() *MockRPCHandlerMockRecorder {
	return m.recorder
}

// HandleProxyRPC mocks base method.
func (m *MockRPCHandler) HandleProxyRPC(r *http.Request, req api.JSONRPCRequest) api.RPCResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleProxyRPC", r, req)
	ret0, _ := ret[0].(api.RPCResponse)
	return ret0
}

// HandleProxyRPC indicates an expected call of HandleProxyRPC.
func (mr *MockRPCHandlerMockRecorder) HandleProxyRPC(r, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleProxyRPC", reflect.TypeOf((*MockRPCHandler)(nil).HandleProxyRPC), r, req)
}

// HandleUniversalMinting mocks base method.
func (m *MockRPCHandler) HandleUniversalMinting(r *http.Request, req api.JSONRPCRequest) api.RPCResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUniversalMinting", r, req)
	ret0, _ := ret[0].(api.RPCResponse)
	return ret0
}

// HandleUniversalMinting indicates an expected call of HandleUniversalMinting.
func (mr *MockRPCHandlerMockRecorder) HandleUniversalMinting(r, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUniversalMinting", reflect.TypeOf((*MockRPCHandler)(nil).HandleUniversalMinting), r, req)
}

// PostRPCRequestHandler mocks base method.
func (m *MockRPCHandler) PostRPCRequestHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostRPCRequestHandler", w, r)
}

// PostRPCRequestHandler indicates an expected call of PostRPCRequestHandler.
func (mr *MockRPCHandlerMockRecorder) PostRPCRequestHandler(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRPCRequestHandler", reflect.TypeOf((*MockRPCHandler)(nil).PostRPCRequestHandler), w, r)
}

// SetStateService mocks base method.
func (m *MockRPCHandler) SetStateService(stateService state.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStateService", stateService)
}

// SetStateService indicates an expected call of SetStateService.
func (mr *MockRPCHandlerMockRecorder) SetStateService(stateService any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStateService", reflect.TypeOf((*MockRPCHandler)(nil).SetStateService), stateService)
}

// MockRPCUniversalHandler is a mock of RPCUniversalHandler interface.
type MockRPCUniversalHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRPCUniversalHandlerMockRecorder
}

// MockRPCUniversalHandlerMockRecorder is the mock recorder for MockRPCUniversalHandler.
type MockRPCUniversalHandlerMockRecorder struct {
	mock *MockRPCUniversalHandler
}

// NewMockRPCUniversalHandler creates a new mock instance.
func NewMockRPCUniversalHandler(ctrl *gomock.Controller) *MockRPCUniversalHandler {
	mock := &MockRPCUniversalHandler{ctrl: ctrl}
	mock.recorder = &MockRPCUniversalHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCUniversalHandler) EXPECT() *MockRPCUniversalHandlerMockRecorder {
	return m.recorder
}

// HandleUniversalMinting mocks base method.
func (m *MockRPCUniversalHandler) HandleUniversalMinting(r *http.Request, req api.JSONRPCRequest, stateService state.Service) api.RPCResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUniversalMinting", r, req, stateService)
	ret0, _ := ret[0].(api.RPCResponse)
	return ret0
}

// HandleUniversalMinting indicates an expected call of HandleUniversalMinting.
func (mr *MockRPCUniversalHandlerMockRecorder) HandleUniversalMinting(r, req, stateService any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUniversalMinting", reflect.TypeOf((*MockRPCUniversalHandler)(nil).HandleUniversalMinting), r, req, stateService)
}

// MockProxyHandler is a mock of ProxyHandler interface.
type MockProxyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockProxyHandlerMockRecorder
}

// MockProxyHandlerMockRecorder is the mock recorder for MockProxyHandler.
type MockProxyHandlerMockRecorder struct {
	mock *MockProxyHandler
}

// NewMockProxyHandler creates a new mock instance.
func NewMockProxyHandler(ctrl *gomock.Controller) *MockProxyHandler {
	mock := &MockProxyHandler{ctrl: ctrl}
	mock.recorder = &MockProxyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyHandler) EXPECT() *MockProxyHandlerMockRecorder {
	return m.recorder
}

// GetHttpClient mocks base method.
func (m *MockProxyHandler) GetHttpClient() api.HTTPClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHttpClient")
	ret0, _ := ret[0].(api.HTTPClientInterface)
	return ret0
}

// GetHttpClient indicates an expected call of GetHttpClient.
func (mr *MockProxyHandlerMockRecorder) GetHttpClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHttpClient", reflect.TypeOf((*MockProxyHandler)(nil).GetHttpClient))
}

// GetRpcUrl mocks base method.
func (m *MockProxyHandler) GetRpcUrl() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRpcUrl")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRpcUrl indicates an expected call of GetRpcUrl.
func (mr *MockProxyHandlerMockRecorder) GetRpcUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRpcUrl", reflect.TypeOf((*MockProxyHandler)(nil).GetRpcUrl))
}

// HandleProxyRPC mocks base method.
func (m *MockProxyHandler) HandleProxyRPC(r *http.Request, req api.JSONRPCRequest, stateService state.Service) api.RPCResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleProxyRPC", r, req, stateService)
	ret0, _ := ret[0].(api.RPCResponse)
	return ret0
}

// HandleProxyRPC indicates an expected call of HandleProxyRPC.
func (mr *MockProxyHandlerMockRecorder) HandleProxyRPC(r, req, stateService any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleProxyRPC", reflect.TypeOf((*MockProxyHandler)(nil).HandleProxyRPC), r, req, stateService)
}

// SetHttpClient mocks base method.
func (m *MockProxyHandler) SetHttpClient(client api.HTTPClientInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHttpClient", client)
}

// SetHttpClient indicates an expected call of SetHttpClient.
func (mr *MockProxyHandlerMockRecorder) SetHttpClient(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHttpClient", reflect.TypeOf((*MockProxyHandler)(nil).SetHttpClient), client)
}
