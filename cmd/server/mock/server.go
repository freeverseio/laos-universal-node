// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/server/server.go
//
// Generated by this command:
//
//	mockgen -source=cmd/server/server.go -destination=cmd/server/mock/server.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPServerController is a mock of HTTPServerController interface.
type MockHTTPServerController struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPServerControllerMockRecorder
}

// MockHTTPServerControllerMockRecorder is the mock recorder for MockHTTPServerController.
type MockHTTPServerControllerMockRecorder struct {
	mock *MockHTTPServerController
}

// NewMockHTTPServerController creates a new mock instance.
func NewMockHTTPServerController(ctrl *gomock.Controller) *MockHTTPServerController {
	mock := &MockHTTPServerController{ctrl: ctrl}
	mock.recorder = &MockHTTPServerControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPServerController) EXPECT() *MockHTTPServerControllerMockRecorder {
	return m.recorder
}

// ListenAndServe mocks base method.
func (m *MockHTTPServerController) ListenAndServe() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAndServe")
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAndServe indicates an expected call of ListenAndServe.
func (mr *MockHTTPServerControllerMockRecorder) ListenAndServe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAndServe", reflect.TypeOf((*MockHTTPServerController)(nil).ListenAndServe))
}

// SetAddr mocks base method.
func (m *MockHTTPServerController) SetAddr(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAddr", arg0)
}

// SetAddr indicates an expected call of SetAddr.
func (mr *MockHTTPServerControllerMockRecorder) SetAddr(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAddr", reflect.TypeOf((*MockHTTPServerController)(nil).SetAddr), arg0)
}

// SetHandler mocks base method.
func (m *MockHTTPServerController) SetHandler(arg0 http.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHandler", arg0)
}

// SetHandler indicates an expected call of SetHandler.
func (mr *MockHTTPServerControllerMockRecorder) SetHandler(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHandler", reflect.TypeOf((*MockHTTPServerController)(nil).SetHandler), arg0)
}

// SetKeepAlivesEnabled mocks base method.
func (m *MockHTTPServerController) SetKeepAlivesEnabled(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetKeepAlivesEnabled", arg0)
}

// SetKeepAlivesEnabled indicates an expected call of SetKeepAlivesEnabled.
func (mr *MockHTTPServerControllerMockRecorder) SetKeepAlivesEnabled(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeepAlivesEnabled", reflect.TypeOf((*MockHTTPServerController)(nil).SetKeepAlivesEnabled), arg0)
}

// Shutdown mocks base method.
func (m *MockHTTPServerController) Shutdown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockHTTPServerControllerMockRecorder) Shutdown(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockHTTPServerController)(nil).Shutdown), arg0)
}
