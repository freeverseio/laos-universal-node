// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/rpc/server.go

// Package mockrpc is a generated GoMock package.
package mockrpc

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRPCServerer is a mock of RPCServerer interface.
type MockRPCServerer struct {
	ctrl     *gomock.Controller
	recorder *MockRPCServererMockRecorder
}

// MockRPCServererMockRecorder is the mock recorder for MockRPCServerer.
type MockRPCServererMockRecorder struct {
	mock *MockRPCServerer
}

// NewMockRPCServerer creates a new mock instance.
func NewMockRPCServerer(ctrl *gomock.Controller) *MockRPCServerer {
	mock := &MockRPCServerer{ctrl: ctrl}
	mock.recorder = &MockRPCServererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCServerer) EXPECT() *MockRPCServererMockRecorder {
	return m.recorder
}

// RegisterName mocks base method.
func (m *MockRPCServerer) RegisterName(name string, receiver interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterName", name, receiver)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterName indicates an expected call of RegisterName.
func (mr *MockRPCServererMockRecorder) RegisterName(name, receiver interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterName", reflect.TypeOf((*MockRPCServerer)(nil).RegisterName), name, receiver)
}

// ServeHTTP mocks base method.
func (m *MockRPCServerer) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockRPCServererMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockRPCServerer)(nil).ServeHTTP), arg0, arg1)
}
